{"version":3,"sources":["utils/RussianLanguage.js","utils/Localization.js","utils/restCalls.js","components/SmartthingsSettings.js","components/Constants.js","components/SmartthingsAddDevice.js","components/SmartthingsViewDevice.js","components/AddUser.js","components/ViewUser.js","components/SmartthingsSMS.js","components/CronSettings.js","components/NotificationSettings.js","components/RemoteCtrlContentHandler.js","components/RemoteCtrlMain.js","App.js","reportWebVitals.js","index.js"],"names":["RussianLabels","servicePort","uiPort","smartthingsAppId","smartthingsAppSecret","save","settings","devices","addDevice","users","addUser","actionId","deviceLabel","cooling10Mins","cooling20Mins","cooling30Mins","windscreen10Mins","windscreen20Mins","windscreen30Mins","heating10Mins","heating20Mins","heating30Mins","airconOn","airconOff","headlightsOn","headlightsOff","parkinglightsOn","parkinglightsOff","username","password","delete","shard","macAddress","keycloakJson","testDevice","actionTimeout","language","modalHelp","modalStep1","modalStep2","modalStep3","modalStep4","modelYear","any","phev2019","battery","updateValue","loading","batteryFactory","doors","forceUpdate","executeUpdate","hvac","sendNotification","notification","testNotification","testNotificationLabel","sms","smsPassword","phone","mikrotikScript","mikrotikScheduler","smsCommands","smsCar","useSmartthings","smsCodes","cron","sendSMSNotification","theft","Yes","No","useCloud","both","onlySMS","onlyPush","none","code","description","name","value","role","noneRole","logout","evseSlow","evseFastCharge","Labels","updateDevices","syncDevices","cloudDevices","getLabels","Cookies","get","setLanguage","set","fetch","require","REACT_BACKEND_URL","errorHandler","response","console","error","data","fetchData","url","method","headers","Promise","resolve","reject","transformResponse","req","withCredentials","timeout","then","catch","fetchBackend","a","sendData","sendToBackend","headerMap","JSON","stringify","SmartthingsSettings","state","changed","isModalVisible","roles","this","reload","setState","copyConfig","parse","smartthings","appId","appSecret","port","portUI","enabled","status","res","event","message","props","title","dataIndex","key","render","text","type","icon","QuestionCircleOutlined","onClick","Modal","visible","onCancel","footer","window","open","width","src","mask","placeholder","onChange","newValue","target","includes","newState","TextArea","autoSize","minRows","maxRows","style","defaultValue","map","r","Option","checked","e","PoweroffOutlined","min","max","step","stringMode","lang","Paragraph","editable","connectionType","authenticationType","push","showIcon","closable","pagination","columns","getColumns","dataSource","block","disabled","onSaveClick","React","CONTENTS","SmartthingsAddDevice","canSave","id","uuidv4","validation","onActionChange","onActionYearSelectChange","SmartthingsViewDevice","loadingPage","deviceId","updatable","prevProps","onTestClick","device","find","d","danger","onDeleteClick","AddUser","newConfigurations","ViewUser","userId","user","u","SmartthingsSMS","mikrotikSMS","currentHost","secret","Object","keys","command","replace","location","protocol","hostname","portSMS","resp","respHelp","respCodes","CronSettings","NotificationSettings","notifications","forEach","nk","RemoteCtrlContentHandler","contentPage","RemoteCtrlMain","collapsed","selectorPage","componentId","onCollapse","onSmartThingsSettingClick","onSMSClick","onNotificationClick","onCRONClick","onSmartThingsAddDeviceClick","onAddUsersClick","onSmartThingsViewDeviceClick","onViewUserClick","size","Title","minHeight","collapsible","theme","defaultSelectedKeys","mode","Item","DesktopOutlined","AppstoreAddOutlined","UserOutlined","MessageOutlined","NotificationOutlined","ScheduleOutlined","LogoutOutlined","href","className","padding","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8c4ecba.chunk.js","sourcesContent":["export const RussianLabels = {\n  servicePort: 'Service Port',\n  uiPort: 'UI Port',\n  smartthingsAppId: 'Smartthings Application Id',\n  smartthingsAppSecret: 'Smartthings Application Secret',\n  save: 'Сохранить',\n  settings: 'Настройки',\n  devices: 'Устройства',\n  addDevice: 'Добавить Устройство',\n  users: 'Пользователи',\n  addUser: 'Добавить Пользователя',\n  actionId: 'Действие',\n  deviceLabel: 'Название устройства',\n  cooling10Mins: 'Режим Охлаждения на 10 Мин.',\n  cooling20Mins: 'Режим Охлаждения на 20 Мин.',\n  cooling30Mins: 'Режим Охлаждения на 30 Мин.',\n  windscreen10Mins: 'Обогрев лобового окна на 10 мин.',\n  windscreen20Mins: 'Обогрев лобового окна на 20 мин.',\n  windscreen30Mins: 'Обогрев лобового окна на 30 мин.',\n  heating10Mins: 'Режим Отопителя на 10 мин.',\n  heating20Mins: 'Режим Отопителя на 20 мин.',\n  heating30Mins: 'Режим Отопителя на 30 мин.',\n  airconOn: 'Включить Климат контроль',\n  airconOff: 'Отключить Климат Контроль',\n  headlightsOn: 'Включить Фары',\n  headlightsOff: 'Выключить Фары',\n  parkinglightsOn: 'Включить Парковочные огни',\n  parkinglightsOff: 'Выключить Парковочные огни',\n  username: 'Имя пользователя',\n  password: 'Пароль',\n  delete: 'Удалить',\n  shard: 'Smartthings Portal Shard',\n  macAddress: 'MAC адрес',\n  keycloakJson: 'Securing Applications using keycloak.json',\n  testDevice: 'Протестировать устройство',\n  actionTimeout: 'Максимальное время выполнения ',\n  language: 'Язык',\n  modalHelp: 'Где взять параметр ',\n  modalStep1: '1. Откройте портал ',\n  modalStep2: '2. Выбрать smartapps в вашей локации ',\n  modalStep3: '3. Выберите созданное вами \"remote-ctrl-gsm\" ',\n  modalStep4: '4. Возмите со страницы параметр ',\n  modelYear: 'Год Выпуска PHEV',\n  any: 'Любой',\n  phev2019: '2019',\n  battery: 'Заряд Батареи',\n  updateValue: 'Обновить Текущее Значение',\n  loading: 'Подождите идет загрузка...',\n  batteryFactory: 'Множитель батареи',\n  doors: 'Статус Открытия/Закрытия Дверей',\n  forceUpdate: 'Принудительно обновить модуль',\n  executeUpdate: 'Принудительно обновить перед выполнением',\n  hvac: 'Текущий режим HVAC',\n  sendNotification: 'Отправлять сообщения о состоянии батареи',\n  notification: 'Нотификация',\n  testNotification: 'Проверить отправку сообщений',\n  testNotificationLabel: 'Отправлять Push Уведомления',\n  sms: 'SMS Сервис',\n  smsPassword: 'SMS Пароль',\n  phone: 'Номер мобильного телефона с которого можно слать СМС',\n  mikrotikScript: 'Mikrotik Script',\n  mikrotikScheduler: 'Mikrotik Scheduler',\n  smsCommands: 'Список поддержуемых SMS операций',\n  smsCar: 'Год Выпуска PHEV в SMS',\n  useSmartthings: 'Использовать Smartthings',\n  smsCodes: 'SMS Коды Ошибок',\n  cron: 'Cron задания',\n  sendSMSNotification: 'Отправлять нотификацию через СМС',\n  theft: 'Активирована ли штатная охранная система сигнализации в ETACS?',\n  Yes: 'Да',\n  No: 'Нет',\n  useCloud: 'отключена Настройка  \"Setup my devices without cloud\" в Smartthings Smartapp',\n  both: 'Оба типа',\n  onlySMS: 'Только СМС',\n  onlyPush: 'Только Push',\n  none: 'Без нотификации',\n  code: 'Код',\n  description: 'Описание',\n  name: 'Название',\n  value: 'Значение',\n  role: 'Авторизационная Роль',\n  noneRole: 'Без Авторизации',\n  logout: 'Выйти',\n  evseSlow: 'EVSE Медленая Зарядка',\n  evseFastCharge: 'EVSE Быстрая Зарядка',\n};\n","import Cookies from 'js-cookie';\nimport { RussianLabels } from './RussianLanguage';\n\nconst Labels = {\n  servicePort: 'Service Port',\n  uiPort: 'UI Port',\n  smartthingsAppId: 'Smartthings Application Id',\n  smartthingsAppSecret: 'Smartthings Application Secret',\n  save: 'Save',\n  settings: 'Settings',\n  devices: 'Devices',\n  addDevice: 'Add Device',\n  users: 'Users',\n  addUser: 'Add User',\n  actionId: 'Action',\n  deviceLabel: 'Device Label',\n  cooling10Mins: 'Cooling Mode 10 Mins',\n  cooling20Mins: 'Cooling Mode 20 Mins',\n  cooling30Mins: 'Cooling Mode 30 Mins',\n  windscreen10Mins: 'Windscreen Mode 10 Mins',\n  windscreen20Mins: 'Windscreen Mode 20 Mins',\n  windscreen30Mins: 'Windscreen Mode 30 Mins',\n  heating10Mins: 'Heating Mode 10 Mins',\n  heating20Mins: 'Heating Mode 20 Mins',\n  heating30Mins: 'Heating Mode 30 Mins',\n  airconOn: 'Air conditioner On',\n  airconOff: 'Air conditioner Off',\n  headlightsOn: 'Headlights On',\n  headlightsOff: 'Headlights Off',\n  parkinglightsOn: 'Parkinglights On',\n  parkinglightsOff: 'Parkinglights Off',\n  username: 'Username',\n  password: 'Password',\n  delete: 'Delete',\n  shard: 'Smartthings Portal Shard',\n  macAddress: 'Outlander PHEV Client Mac Address',\n  keycloakJson: 'Securing Applications using keycloak.json',\n  testDevice: 'Test Action',\n  testNotification: 'Test Notification',\n  actionTimeout: 'Action Timeout',\n  language: 'Language',\n  modalHelp: 'Where to get ',\n  modalStep1: '1. Open ',\n  modalStep2: '2. Select smartapps in your location ',\n  modalStep3: '3. Select your smartapp ',\n  modalStep4: '4. get parameter ',\n  modelYear: 'Model Year',\n  any: 'Any',\n  phev2019: '2019',\n  battery: 'battery',\n  updateValue: 'Update Value',\n  loading: 'Loading...',\n  batteryFactory: 'Battery Factor',\n  doors: 'Doors Status',\n  forceUpdate: 'Force Update',\n  executeUpdate: 'Force Update during update values',\n  hvac: 'Thermostat Operating State',\n  sendNotification: 'Send Push Notification about Battery Warning',\n  notification: 'Notification',\n  testNotificationLabel: 'Send Push Notification',\n  sms: 'SMS API Service',\n  smsPassword: 'SMS Password',\n  phone: 'Authorized mobile phone from which SMS can be sent',\n  mikrotikScript: 'Mikrotik Script',\n  mikrotikScheduler: 'Mikrotik Scheduler',\n  smsCommands: 'List of SMS Commands',\n  smsCar: 'Model Year for SMS',\n  useSmartthings: 'Use Smartthings',\n  smsCodes: 'SMS Error Codes',\n  cron: 'Cron Jobs',\n  sendSMSNotification: 'Send notification over SMS',\n  updateDevices: 'Update Devices Job',\n  syncDevices: 'sync Devices between local and Smartthings Job',\n  cloudDevices: 'execute Devices',\n  theft: 'Theft alarm system activated in ETACS ',\n  Yes: 'Yes',\n  No: 'No',\n  useCloud: 'disabled setting \"Setup my devices without cloud\" in Smartthings SmartApp',\n  both: 'Both',\n  onlySMS: 'SMS',\n  onlyPush: 'PUSH',\n  none: 'None',\n  code: 'Code',\n  description: 'Description',\n  name: 'Name',\n  value: 'Value',\n  role: 'Authorization Role',\n  noneRole: 'Authorization is disabled',\n  logout: 'Logout',\n  evseSlow: 'EVSE Slow Charge',\n  evseFastCharge: 'EVSE Fast Charge',\n};\n\nexport function getLabels() {\n  const currentLanguage = Cookies.get('Language');\n  if (currentLanguage === 'Russian') {\n    return { ...Labels, ...RussianLabels };\n  }\n  return Labels;\n}\n\nexport function setLanguage(language) {\n  const currentLanguage = Cookies.get('Language');\n  if (currentLanguage !== language) {\n    if (language === 'Russian' || language === 'English') {\n      Cookies.set('Language', language);\n    }\n  }\n}\n","const fetch = require('axios');\n\nconst REACT_BACKEND_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : '';\n\nfunction errorHandler(response) {\n  // eslint-disable-next-line no-console\n  console.error('error:', response.data);\n}\n\nexport function fetchData(url, method = 'GET', headers) {\n  return new Promise((resolve, reject) => {\n    fetch({\n      url,\n      method,\n      headers,\n      transformResponse: (req) => req,\n      withCredentials: true,\n      timeout: 29000,\n    }).then((response) => {\n      resolve(response);\n    }).catch((response) => {\n      errorHandler(response);\n      reject(response);\n    });\n  });\n}\n\nexport async function fetchBackend(url, method = 'GET', headers) {\n  return await fetchData(`${REACT_BACKEND_URL}${url}`, method, headers);\n}\n\nexport function sendData(url, method = 'POST', data, headers) {\n  return new Promise((resolve, reject) => {\n    fetch({\n      url,\n      method,\n      data,\n      transformResponse: (req) => req,\n      headers,\n      withCredentials: true,\n      timeout: 29000,\n    }).then((response) => {\n      resolve(response);\n    }).catch((response) => {\n      errorHandler(response);\n      reject(response);\n    });\n  });\n}\n\nexport async function sendToBackend(url, method = 'POST', data, headers) {\n  const headerMap = headers || {};\n  headerMap['Content-Type'] = 'application/json';\n  return await sendData(`${REACT_BACKEND_URL}${url}`, method, JSON.stringify(data), headerMap);\n}\n","import * as React from 'react';\nimport {\n  Alert, Button, Checkbox, Image, InputNumber, Select, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport MaskedInput from 'antd-mask-input';\nimport TextArea from 'antd/es/input/TextArea';\nimport { PoweroffOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport Modal from 'antd/es/modal/Modal';\nimport { getLabels, setLanguage } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\n\nexport class SmartthingsSettings extends React.Component {\n    state = {\n      settings: {},\n      servicePort: '',\n      uiPort: '',\n      smartthingsAppId: '',\n      smartthingsAppSecret: '',\n      macAddress: '',\n      actionTimeout: 0,\n      language: 'English',\n      changed: false,\n      loading: false,\n      error: '',\n      keycloakJson: '',\n      executeUpdate: true,\n      sms: true,\n      smsPassword: '',\n      sendNotification: true,\n      sendSMSNotification: false,\n      smsCar: 'any',\n      useSmartthings: false,\n      useCloud: false,\n      batteryFactory: 1.0,\n      isModalVisible: false,\n      theft: false,\n      role: '',\n      roles: [],\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async onSaveClick() {\n      const {\n        uiPort,\n        servicePort,\n        settings,\n        smartthingsAppId,\n        smartthingsAppSecret,\n        macAddress,\n        keycloakJson,\n        language,\n        actionTimeout,\n        batteryFactory,\n        executeUpdate,\n        sendNotification,\n        smsPassword,\n        sms,\n        sendSMSNotification,\n        shard,\n        useSmartthings,\n        smsCar,\n        theft,\n        role,\n      } = this.state;\n      this.setState({ loading: true });\n      const copyConfig = JSON.parse(JSON.stringify(settings.data));\n      if (smartthingsAppId) {\n        copyConfig.smartthings.appId = smartthingsAppId;\n      }\n      if (smartthingsAppSecret) {\n        copyConfig.smartthings.appSecret = smartthingsAppSecret;\n      }\n      if (shard) {\n        copyConfig.smartthings.shard = shard;\n      }\n      if (macAddress) {\n        copyConfig.macAddress = macAddress;\n      }\n      if (servicePort) {\n        copyConfig.port = servicePort;\n      }\n      if (uiPort) {\n        copyConfig.portUI = uiPort;\n      }\n      if (actionTimeout) {\n        copyConfig.smartthings.timeout = actionTimeout;\n      }\n      if (language) {\n        copyConfig.language = language;\n      }\n      if (batteryFactory) {\n        copyConfig.batteryFactory = batteryFactory;\n      }\n      copyConfig.smartthings.sms.enabled = sms;\n      if (smsPassword) {\n        copyConfig.smartthings.sms.password = smsPassword;\n      }\n      if (smsCar) {\n        copyConfig.smartthings.sms.smsCar = smsCar;\n        copyConfig.smartthings.sms.sendSMSNotification = sendSMSNotification;\n      }\n      if (role) {\n        copyConfig.role = role;\n      }\n      copyConfig.smartthings.useSmartthings = useSmartthings;\n      copyConfig.theft = theft;\n      copyConfig.smartthings.executeUpdate = executeUpdate;\n      copyConfig.smartthings.sendNotification = sendNotification;\n      try {\n        let res;\n        let status = { status: 'OK' };\n        if (useSmartthings) {\n          res = await fetchBackend(`/ui/smartthings/check?appId=${smartthingsAppId}&secret=${smartthingsAppSecret}`);\n          status = JSON.parse(res.data);\n        }\n        if (status.status === 'OK') {\n          res = await sendToBackend('/ui/settings', 'POST', copyConfig);\n          status = JSON.parse(res.data);\n          if (status.status === 'OK') {\n            const event = { changed: false };\n            if (keycloakJson) {\n              res = await sendToBackend('/ui/settings/saveKeycloak', 'POST', { keycloakJson });\n              status = JSON.parse(res.data);\n              if (status.status !== 'OK') {\n                event.error = status.message;\n              } else {\n                event.error = '';\n              }\n            }\n            await this.props.reload();\n            await this.reload();\n            this.setState(event);\n          } else {\n            this.setState({ error: status.message });\n          }\n        } else {\n          this.setState({ error: status.message });\n        }\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => {\n            if (text === 'smartthingsAppId'\n                || text === 'smartthingsAppSecret') {\n              return (\n                <div>\n                  <a>{getLabels()[text] || text}</a>\n                  <Button\n                    type=\"text\"\n                    icon={<QuestionCircleOutlined />}\n                    onClick={() => {\n                      this.setState({ isModalVisible: true });\n                    }}\n                  />\n                  <Modal\n                    title={getLabels().modalHelp + getLabels()[text] || text}\n                    visible={this.state.isModalVisible}\n                    onCancel={(\n                    ) => { this.setState({ isModalVisible: false }); }}\n                    footer={[\n                      <Button\n                        key=\"ok\"\n                        type=\"primary\"\n                        onClick={() => {\n                          this.setState({ isModalVisible: false });\n                        }}\n                      >\n                        Ok\n                      </Button>,\n                    ]}\n                  >\n                    <p>\n                      {getLabels().modalStep1}\n                      <Button\n                        type=\"link\"\n                        onClick={() => {\n                          window.open('https://graph.api.smartthings.com', '_blank');\n                        }}\n                      >\n                        https://graph.api.smartthings.com/\n                      </Button>\n                    </p>\n                    <p>{getLabels().modalStep2}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp1.png\"\n                    />\n                    <p>{getLabels().modalStep3}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp2.png\"\n                    />\n                    <p>{getLabels().modalStep4 + getLabels()[text] || text}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp3.png\"\n                    />\n                  </Modal>\n                </div>\n              );\n            }\n            return <a>{getLabels()[text] || text}</a>;\n          },\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'macAddress') {\n              return (\n                <MaskedInput\n                  mask=\"##:##:##:##:##:##\"\n                  name={getLabels().macAddress || text}\n                  value={value}\n                  placeholder=\"xx:xx:xx:xx:xx:xx\"\n                  onChange={\n                            (newValue) => {\n                              if (newValue.target.value && !newValue.target.value.includes('_')) {\n                                const newState = { changed: true };\n                                newState.macAddress = newValue.target.value;\n                                this.setState(newState);\n                              }\n                            }\n                        }\n                />\n              );\n            }\n            if (data.name === 'keycloakJson') {\n              return (\n                <TextArea\n                  onChange={\n                                (newValue) => {\n                                  if (newValue.target.value) {\n                                    const newState = { changed: true };\n                                    newState.keycloakJson = newValue.target.value;\n                                    this.setState(newState);\n                                  }\n                                }\n                            }\n                  placeholder=\"Keycloak Json\"\n                  autoSize={{ minRows: 3, maxRows: 5 }}\n                />\n              );\n            }\n            if (data.name === 'role') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.setState({\n                      role: event,\n                      changed: true,\n                    });\n                  }}\n                  defaultValue={this.state.role || 'none'}\n                >\n                  {this.state.roles.map((r) => <Select.Option value={r}>{r}</Select.Option>)}\n                  <Select.Option value=\"none\">{getLabels().noneRole}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'executeUpdate') {\n              return (\n                <Checkbox\n                  checked={this.state.executeUpdate}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.executeUpdate = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'sendNotification') {\n              return (\n                <div>\n                  <Checkbox\n                    checked={this.state.sendNotification}\n                    onChange={(e) => {\n                      const newState = { changed: true };\n                      newState.sendNotification = e.target.checked;\n                      this.setState(newState);\n                    }}\n                  >\n                    {getLabels().testNotificationLabel}\n                  </Checkbox>\n                  <br />\n                  <Button\n                    type=\"primary\"\n                    icon={<PoweroffOutlined />}\n                    loading={this.state.loading}\n                    onClick={async () => {\n                      this.setState({ loading: true });\n                      try {\n                        await sendToBackend('/ui/settings/testNotification', 'POST', { message: 'Test Message' });\n                      } finally {\n                        this.setState({ loading: false });\n                      }\n                    }}\n                  >\n                    {getLabels().testNotification}\n                  </Button>\n                </div>\n              );\n            }\n            if (data.name === 'actionTimeout') {\n              return (\n                <InputNumber\n                  style={{\n                    width: 200,\n                  }}\n                  defaultValue={this.state.actionTimeout}\n                  min=\"0\"\n                  max=\"300000\"\n                  step=\"1000\"\n                  onChange={\n                        (newValue) => {\n                          if (newValue) {\n                            const newState = { changed: true };\n                            newState.actionTimeout = newValue;\n                            this.setState(newState);\n                          }\n                        }\n                      }\n                  stringMode\n                />\n              );\n            }\n            if (data.name === 'batteryFactory') {\n              return (\n                <InputNumber\n                  style={{\n                    width: 200,\n                  }}\n                  defaultValue={this.state.batteryFactory}\n                  min=\"0\"\n                  max=\"10\"\n                  step=\"0.0001\"\n                  onChange={\n                        (newValue) => {\n                          if (newValue) {\n                            const newState = { changed: true };\n                            newState.batteryFactory = newValue;\n                            this.setState(newState);\n                          }\n                        }\n                      }\n                  stringMode\n                />\n              );\n            }\n            if (data.name === 'smsCar') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.setState({\n                      smsCar: event,\n                      changed: true,\n                    });\n                  }}\n                  defaultValue={this.state.smsCar || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'sms') {\n              return (\n                <Checkbox\n                  checked={this.state.sms}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.sms = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'theft') {\n              return (\n                <Checkbox\n                  checked={this.state.theft}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.theft = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'sendSMSNotification') {\n              return (\n                <Checkbox\n                  checked={this.state.sendSMSNotification}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.sendSMSNotification = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'useSmartthings') {\n              return (\n                <Checkbox\n                  checked={this.state.useSmartthings}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.useSmartthings = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'useCloud') {\n              return this.state.useCloud ? getLabels().Yes : getLabels().No;\n            }\n            if (data.name === 'language') {\n              return (\n                <Select\n                  defaultValue={this.state.language}\n                  style={{ width: 200 }}\n                  onChange={(lang) => {\n                    this.setState({ language: lang, changed: true });\n                  }}\n                >\n                  <Select.Option value=\"English\">English</Select.Option>\n                  <Select.Option value=\"Russian\">Russian</Select.Option>\n                </Select>\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { changed: true };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    async reload() {\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      let roles = [];\n      if (settings.data.connectionType === 'keycloak') {\n        const res = await fetchBackend('/ui/keycloak/roles');\n        roles = JSON.parse(res.data);\n      }\n      setLanguage(settings.data.language || 'English');\n      this.setState({\n        settings,\n        servicePort: settings.data.port,\n        uiPort: settings.data.portUI,\n        smartthingsAppId: settings.data.smartthings.appId,\n        smartthingsAppSecret: settings.data.smartthings.appSecret,\n        macAddress: settings.data.macAddress,\n        shard: settings.data.smartthings.shard,\n        authenticationType: settings.data.connectionType,\n        actionTimeout: settings.data.smartthings.timeout,\n        batteryFactory: settings.data.batteryFactory || 1.0,\n        language: settings.data.language || 'English',\n        theft: settings.data.theft,\n        executeUpdate: settings.data.smartthings.executeUpdate,\n        sendNotification: settings.data.smartthings.sendNotification,\n        sms: settings.data.smartthings.sms.enabled,\n        smsCar: settings.data.smartthings.sms.smsCar || 'any',\n        smsPassword: settings.data.smartthings.sms.password,\n        useSmartthings: settings.data.smartthings.useSmartthings,\n        useCloud: settings.data.smartthings.useCloud,\n        role: settings.data.role,\n        roles,\n        sendSMSNotification: !!settings.data.smartthings.sms.sendSMSNotification,\n      });\n    }\n\n    render() {\n      const {\n        settings, changed, useSmartthings, loading, error, sms, role,\n      } = this.state;\n      if (settings.status === 'OK') {\n        const data = [{\n          name: 'macAddress',\n          value: settings.data.macAddress,\n        }, {\n          name: 'theft',\n          value: settings.data.theft,\n        },\n        {\n          name: 'useSmartthings',\n          value: settings.data.smartthings.useSmartthings,\n        },\n        {\n          name: 'useCloud',\n          value: settings.data.smartthings.useCloud,\n        }];\n        if (useSmartthings) {\n          data.push({\n            name: 'shard',\n            value: settings.data.smartthings.shard,\n          },\n          {\n            name: 'smartthingsAppId',\n            value: settings.data.smartthings.appId,\n          },\n          {\n            name: 'smartthingsAppSecret',\n            value: settings.data.smartthings.appSecret,\n          },\n          {\n            name: 'sendNotification',\n            value: settings.data.smartthings.sendNotification,\n          });\n        }\n\n        data.push(\n          {\n            name: 'keycloakJson',\n            value: '',\n          },\n        );\n        if (settings.data.connectionType === 'keycloak') {\n          data.push(\n            {\n              name: 'role',\n              value: role,\n            },\n          );\n        }\n        data.push({\n          name: 'actionTimeout',\n          value: settings.data.smartthings.timeout,\n        },\n        {\n          name: 'executeUpdate',\n          value: settings.data.smartthings.executeUpdate,\n        },\n        {\n          name: 'language',\n          value: settings.data.language,\n        },\n        {\n          name: 'batteryFactory',\n          value: settings.data.batteryFactory || 1.0,\n        },\n        {\n          name: 'sms',\n          value: settings.data.smartthings.sms.enabled,\n        });\n        if (sms) {\n          data.push({\n            name: 'smsPassword',\n            value: settings.data.smartthings.sms.password,\n          });\n          data.push({\n            name: 'smsCar',\n            value: settings.data.smartthings.sms.smsCar,\n          });\n          data.push({\n            name: 'sendSMSNotification',\n            value: settings.data.smartthings.sms.sendSMSNotification,\n          });\n        }\n        return (\n          <div>\n            {error ? (\n              <Alert\n                message={error}\n                showIcon\n                type=\"error\"\n                closable\n              />\n            ) : null}\n            <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n            <Button\n              type=\"primary\"\n              loading={loading}\n              block\n              disabled={!changed}\n              onClick={async () => {\n                await this.onSaveClick();\n              }}\n            >\n              {getLabels().save || 'Save'}\n            </Button>\n          </div>\n        );\n      }\n      return null;\n    }\n}\n","export const CONTENTS = {\n  SmartthingsSettings: 'SMARTTHINGS_SETTINGS',\n  SmartthingsAddDevice: 'SMARTTHINGS_ADD_DEVICE',\n  SmartthingsViewDevice: 'SMARTTHINGS_VIEW_DEVICE',\n  AddUser: 'ADD_USER',\n  ViewUser: 'VIEW_USER',\n  SMS: 'SMS',\n  CRON: 'CRON',\n  NOTIFICATION: 'NOTIFICATION',\n};\n","import * as React from 'react';\nimport {\n  Button, Select, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getLabels } from '../utils/Localization';\nimport { sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class SmartthingsAddDevice extends React.Component {\n    state = {\n      loading: false,\n      canSave: false,\n      deviceLabel: '',\n      actionId: '',\n      modelYear: 'any',\n    };\n\n    async onSaveClick() {\n      const {\n        deviceLabel,\n        actionId,\n        modelYear,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const id = uuidv4();\n        await sendToBackend('/ui/settings/addDevice', 'POST', {\n          id, deviceLabel, actionId, modelYear,\n        });\n        await this.props.reload(CONTENTS.SmartthingsViewDevice, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    onActionYearSelectChange(modelYear) {\n      const { actionId } = this.state;\n      this.setState({\n        modelYear,\n        canSave: this.validation(null, actionId),\n      });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'actionId') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionChange(event);\n                  }}\n                >\n                  <Select.Option value=\"doors\">{getLabels().doors}</Select.Option>\n                  <Select.Option value=\"hvac\">{getLabels().hvac}</Select.Option>\n                  <Select.Option value=\"battery\">{getLabels().battery}</Select.Option>\n                  <Select.Option value=\"airconOn\">{getLabels().airconOn}</Select.Option>\n                  <Select.Option value=\"airconOff\">{getLabels().airconOff}</Select.Option>\n                  <Select.Option value=\"headlightsOn\">{getLabels().headlightsOn}</Select.Option>\n                  <Select.Option value=\"headlightsOff\">{getLabels().headlightsOff}</Select.Option>\n                  <Select.Option value=\"parkinglightsOn\">{getLabels().parkinglightsOn}</Select.Option>\n                  <Select.Option value=\"parkinglightsOff\">{getLabels().parkinglightsOff}</Select.Option>\n                  <Select.Option value=\"cooling10Mins\">{getLabels().cooling10Mins}</Select.Option>\n                  <Select.Option value=\"cooling20Mins\">{getLabels().cooling20Mins}</Select.Option>\n                  <Select.Option value=\"cooling30Mins\">{getLabels().cooling30Mins}</Select.Option>\n                  <Select.Option value=\"windscreen10Mins\">{getLabels().windscreen10Mins}</Select.Option>\n                  <Select.Option value=\"windscreen20Mins\">{getLabels().windscreen20Mins}</Select.Option>\n                  <Select.Option value=\"windscreen30Mins\">{getLabels().windscreen30Mins}</Select.Option>\n                  <Select.Option value=\"heating10Mins\">{getLabels().heating10Mins}</Select.Option>\n                  <Select.Option value=\"heating20Mins\">{getLabels().heating20Mins}</Select.Option>\n                  <Select.Option value=\"heating30Mins\">{getLabels().heating30Mins}</Select.Option>\n                  <Select.Option value=\"forceUpdate\">{getLabels().forceUpdate}</Select.Option>\n                  <Select.Option value=\"evseSlow\">{getLabels().evseSlow}</Select.Option>\n                  <Select.Option value=\"evseFastCharge\">{getLabels().evseFastCharge}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'modelYear') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionYearSelectChange(event);\n                  }}\n                  defaultValue={this.state.modelYear || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    render() {\n      const {\n        loading,\n        canSave,\n        actionId,\n        deviceLabel,\n        modelYear,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'deviceLabel',\n          value: deviceLabel,\n        },\n        {\n          name: 'actionId',\n          value: actionId,\n        },\n      ];\n      if ([\n        'cooling10Mins',\n        'cooling20Mins',\n        'cooling30Mins',\n        'windscreen10Mins',\n        'windscreen20Mins',\n        'windscreen30Mins',\n        'heating10Mins',\n        'heating20Mins',\n        'heating30Mins',\n      ].includes(actionId)) {\n        data.push({\n          name: 'modelYear',\n          value: modelYear,\n        });\n      }\n\n      return (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport {\n  Button, Select, Spin, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { PoweroffOutlined } from '@ant-design/icons';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class SmartthingsViewDevice extends React.Component {\n    state = {\n      loadingPage: false,\n      loading: false,\n      canSave: false,\n      deviceLabel: '',\n      actionId: '',\n      deviceId: '',\n      updatable: false,\n      modelYear: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async componentDidUpdate(prevProps) {\n      if (this.props.deviceId !== prevProps.deviceId) {\n        await this.reload();\n      }\n    }\n\n    async onDeleteClick() {\n      const {\n        deviceId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/deleteDevice', 'POST', { deviceId });\n        await this.props.reload(CONTENTS.SmartthingsSettings);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onSaveClick() {\n      const {\n        deviceLabel,\n        actionId,\n        deviceId,\n        modelYear,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/addDevice', 'POST', {\n          id: deviceId, deviceLabel, actionId, modelYear,\n        });\n        await this.props.reload(CONTENTS.SmartthingsViewDevice, deviceId);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onTestClick() {\n      const {\n        deviceId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/testDevice', 'POST', { id: deviceId });\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    onActionYearSelectChange(modelYear) {\n      const { actionId } = this.state;\n      this.setState({\n        modelYear,\n        canSave: this.validation(null, actionId),\n      });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => (\n            <a>\n              {\n            (text === 'testDevice' && this.state.updatable) ? getLabels().updateValue : getLabels()[text] || text\n              }\n            </a>\n          ),\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'actionId') {\n              return (\n                <Select\n                  defaultValue={this.state.actionId}\n                  style={{ width: 200 }}\n                  disabled={this.state.updatable}\n                  onChange={(event) => {\n                    this.onActionChange(event);\n                  }}\n                >\n                  <Select.Option value=\"doors\">{getLabels().doors}</Select.Option>\n                  <Select.Option value=\"battery\">{getLabels().battery}</Select.Option>\n                  <Select.Option value=\"hvac\">{getLabels().hvac}</Select.Option>\n                  <Select.Option value=\"airconOn\">{getLabels().airconOn}</Select.Option>\n                  <Select.Option value=\"airconOff\">{getLabels().airconOff}</Select.Option>\n                  <Select.Option value=\"headlightsOn\">{getLabels().headlightsOn}</Select.Option>\n                  <Select.Option value=\"headlightsOff\">{getLabels().headlightsOff}</Select.Option>\n                  <Select.Option value=\"parkinglightsOn\">{getLabels().parkinglightsOn}</Select.Option>\n                  <Select.Option value=\"parkinglightsOff\">{getLabels().parkinglightsOff}</Select.Option>\n                  <Select.Option value=\"cooling10Mins\">{getLabels().cooling10Mins}</Select.Option>\n                  <Select.Option value=\"cooling20Mins\">{getLabels().cooling20Mins}</Select.Option>\n                  <Select.Option value=\"cooling30Mins\">{getLabels().cooling30Mins}</Select.Option>\n                  <Select.Option value=\"windscreen10Mins\">{getLabels().windscreen10Mins}</Select.Option>\n                  <Select.Option value=\"windscreen20Mins\">{getLabels().windscreen20Mins}</Select.Option>\n                  <Select.Option value=\"windscreen30Mins\">{getLabels().windscreen30Mins}</Select.Option>\n                  <Select.Option value=\"heating10Mins\">{getLabels().heating10Mins}</Select.Option>\n                  <Select.Option value=\"heating20Mins\">{getLabels().heating20Mins}</Select.Option>\n                  <Select.Option value=\"heating30Mins\">{getLabels().heating30Mins}</Select.Option>\n                  <Select.Option value=\"forceUpdate\">{getLabels().forceUpdate}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'modelYear') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionYearSelectChange(event);\n                  }}\n                  defaultValue={this.state.modelYear || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'deviceId' || data.name === 'deviceLabel') {\n              return value;\n            }\n            if (data.name === 'testDevice') {\n              return (\n                <Button\n                  type=\"primary\"\n                  icon={<PoweroffOutlined />}\n                  loading={this.state.loading}\n                  onClick={() => this.onTestClick()}\n                />\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      const device = settings.data.smartthings.devices.find((d) => d.id === this.props.deviceId);\n      this.setState({\n        actionId: device.actionId,\n        deviceLabel: device.deviceLabel,\n        deviceId: device.id,\n        modelYear: device.modelYear,\n        updatable: device.updatable,\n        loadingPage: false,\n      });\n    }\n\n    render() {\n      const {\n        loading,\n        loadingPage,\n        canSave,\n        actionId,\n        deviceId,\n        deviceLabel,\n        modelYear,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'deviceId',\n          value: deviceId,\n        },\n        {\n          name: 'deviceLabel',\n          value: deviceLabel,\n        },\n        {\n          name: 'actionId',\n          value: actionId,\n        },\n        {\n          name: 'testDevice',\n          value: '',\n        },\n      ];\n\n      if ([\n        'cooling10Mins',\n        'cooling20Mins',\n        'cooling30Mins',\n        'windscreen10Mins',\n        'windscreen20Mins',\n        'windscreen30Mins',\n        'heating10Mins',\n        'heating20Mins',\n        'heating30Mins',\n      ].includes(actionId)) {\n        data.push({\n          name: 'modelYear',\n          value: modelYear,\n        });\n      }\n\n      return loadingPage ? <Spin /> : (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            danger\n            onClick={async () => {\n              await this.onDeleteClick();\n            }}\n          >\n            {getLabels().delete || 'Delete'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Button, Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getLabels } from '../utils/Localization';\nimport { sendToBackend } from '../utils/restCalls';\n\nexport class AddUser extends React.Component {\n    state = {\n      loading: false,\n      canSave: false,\n      username: '',\n      password: '',\n    };\n\n    async onSaveClick() {\n      const {\n        username,\n        password,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const newConfigurations = {\n          users: [],\n        };\n        const id = uuidv4();\n        newConfigurations.users.push(\n          { id, username, password },\n        );\n        await sendToBackend('/ui/settings', 'POST', newConfigurations);\n        await this.props.reload(CONTENTS.ViewUser, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const d = {};\n                    d[data.name] = newValue;\n                    const newState = { canSave: this.validation(d) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(data) {\n      return (data.username || this.state.username) && (data.password || this.state.password);\n    }\n\n    render() {\n      const {\n        loading,\n        canSave,\n        username,\n        password,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'username',\n          value: username,\n        },\n        {\n          name: 'password',\n          value: password,\n        },\n      ];\n\n      return (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Button, Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class ViewUser extends React.Component {\n    state = {\n      loadingPage: false,\n      loading: false,\n      canSave: false,\n      username: '',\n      password: '',\n      userId: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async componentDidUpdate(prevProps) {\n      if (this.props.userId !== prevProps.userId) {\n        await this.reload();\n      }\n    }\n\n    async onSaveClick() {\n      const {\n        username,\n        password,\n        userId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const newConfigurations = {\n          users: [],\n        };\n        const id = userId;\n        newConfigurations.users.push(\n          { id, username, password },\n        );\n        await sendToBackend('/ui/settings', 'POST', newConfigurations);\n        await this.props.reload(CONTENTS.ViewUser, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onDeleteClick() {\n      const {\n        userId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/deleteUser', 'POST', { userId });\n        await this.props.reload(CONTENTS.SmartthingsSettings);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return data.name === 'userId' ? value : (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {data.name === 'password' && value ? '*******' : value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      const user = settings.data.users.find((u) => u.id === this.props.userId);\n      this.setState({\n        username: user.username,\n        password: user.password,\n        userId: user.id,\n        loadingPage: false,\n      });\n    }\n\n    render() {\n      const {\n        loadingPage,\n        loading,\n        canSave,\n        username,\n        userId,\n        password,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'userId',\n          value: userId,\n        },\n        {\n          name: 'username',\n          value: username,\n        },\n        {\n          name: 'password',\n          value: password,\n        },\n      ];\n\n      return loadingPage ? <spin /> : (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            danger\n            onClick={async () => {\n              await this.onDeleteClick();\n            }}\n          >\n            {getLabels().delete || 'Delete'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport MaskedInput from 'antd-mask-input';\nimport TextArea from 'antd/es/input/TextArea';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend } from '../utils/restCalls';\n\nexport class SmartthingsSMS extends React.Component {\n    state = {\n      loadingPage: true,\n      // eslint-disable-next-line react/no-unused-state\n      settings: null,\n      mikrotikSMS: null,\n      smsCommands: null,\n      smsCodes: null,\n      phone: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            if (data.name === 'phone') {\n              return (\n                <MaskedInput\n                  mask=\"+############\"\n                  name={getLabels().phone || text}\n                  value={this.state.phone}\n                  placeholder=\"+xxxxxxxxxxxx\"\n                  onChange={\n                          (newValue) => {\n                            if (newValue.target.value && !newValue.target.value.includes('_')) {\n                              const newState = { phone: newValue.target.value };\n                              this.setState(newState);\n                            }\n                          }\n                      }\n                />\n              );\n            }\n            if (data.name === 'applicationHost') {\n              return this.currentHost();\n            }\n            if (data.name === 'applicationId') {\n              return this.state.settings.data.smartthings.sms.appId;\n            }\n            if (data.name === 'applicationSecret') {\n              return this.state.settings.data.smartthings.sms.secret;\n            }\n            if (data.name === 'smsCodes') {\n              return (\n                <Table\n                  pagination={false}\n                  columns={[\n                    {\n                      title: getLabels().code,\n                      dataIndex: 'name',\n                      key: 'name',\n                    }, {\n                      title: getLabels().description,\n                      dataIndex: 'value',\n                      key: 'value',\n                    }]}\n                  dataSource={\n                         Object.keys(this.state.smsCodes).map((code) => ({\n                           name: code,\n                           value: this.state.smsCodes[code],\n                         }))\n                       }\n                />\n              );\n            }\n            if (data.name === 'smsCommands') {\n              return (\n                <Table\n                  pagination={false}\n                  columns={[{\n                    title: 'Commands',\n                    dataIndex: 'name',\n                    key: 'name',\n                  }]}\n                  dataSource={\n                  this.state.smsCommands.map((command) => ({\n                    name: command,\n                  }))\n                }\n                />\n              );\n            }\n            if (data.name === 'mikrotikScript') {\n              return (\n                <TextArea\n                  autoSize={{ minRows: 30, maxRows: 100 }}\n                  value={\n                  this.state.mikrotikSMS\n                    .replace('PHONE_NUMBER', this.state.phone)\n                    .replace('CURRENT_HOST', this.currentHost())\n                    .replace('APP_ID', this.state.settings.data.smartthings.sms.appId)\n                    .replace('APP_SECRET', this.state.settings.data.smartthings.sms.secret)\n                }\n                />\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = {};\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {text}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    currentHost() {\n      return `${window.location.protocol}//${window.location.hostname}:${this.state.settings.data.portSMS}`;\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      let settings = null;\n      let mikrotikSMS = null;\n      let smsCommands = null;\n      let smsCodes = null;\n      try {\n        const { data } = await fetchBackend('/ui/settings');\n        settings = JSON.parse(data);\n        const resp = await fetchBackend('/mikrotikSMS.script');\n        const respHelp = await fetchBackend('/ui/sms/help');\n        const respCodes = await fetchBackend('/ui/sms/codes');\n        mikrotikSMS = resp.data;\n        smsCommands = JSON.parse(respHelp.data);\n        smsCodes = JSON.parse(respCodes.data);\n      } finally {\n        this.setState({\n          // eslint-disable-next-line react/no-unused-state\n          settings,\n          mikrotikSMS,\n          smsCommands,\n          smsCodes,\n          loadingPage: false,\n        });\n      }\n    }\n\n    render() {\n      const {\n        loadingPage,\n        phone,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'phone',\n          value: phone,\n        },\n        {\n          name: 'applicationHost',\n          value: 'applicationHost',\n        },\n        {\n          name: 'applicationId',\n          value: 'applicationId',\n        },\n        {\n          name: 'applicationSecret',\n          value: 'applicationSecret',\n        },\n      ];\n\n      if (phone) {\n        data.push({\n          name: 'mikrotikScript',\n          value: 'mikrotikScript',\n        });\n      }\n      data.push({\n        name: 'smsCommands',\n        value: 'smsCommands',\n      });\n      return loadingPage ? <spin /> : (\n        <div>\n          <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport {\n  Alert, Button, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { getLabels, setLanguage } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\n\nexport class CronSettings extends React.Component {\n    state = {\n      settings: {},\n      changed: false,\n      error: '',\n      updateDevices: '',\n      syncDevices: '',\n      cloudDevices: '',\n      loading: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async onSaveClick() {\n      const {\n        settings,\n        updateDevices,\n        syncDevices,\n        cloudDevices,\n      } = this.state;\n      this.setState({ loading: true });\n      const copyConfig = JSON.parse(JSON.stringify(settings.data));\n      if (updateDevices) {\n        copyConfig.cron.updateDevices = updateDevices;\n      }\n      if (syncDevices) {\n        copyConfig.cron.syncDevices = syncDevices;\n      }\n      if (cloudDevices) {\n        copyConfig.cron.cloudDevices = cloudDevices;\n      }\n      try {\n        const res = await sendToBackend('/ui/settings', 'POST', copyConfig);\n        const status = JSON.parse(res.data);\n        if (status.status === 'OK') {\n          const event = { changed: false };\n          await this.props.reload();\n          await this.reload();\n          this.setState(event);\n        } else {\n          this.setState({ error: status.message });\n        }\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().name,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { changed: true };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    async reload() {\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      setLanguage(settings.data.language || 'English');\n      this.setState({\n        settings,\n        updateDevices: settings.data.cron.updateDevices,\n        syncDevices: settings.data.cron.syncDevices,\n        cloudDevices: settings.data.cron.cloudDevices,\n      });\n    }\n\n    render() {\n      const {\n        settings, changed, loading, error,\n      } = this.state;\n      if (settings.status === 'OK') {\n        const data = [{\n          name: 'updateDevices',\n          value: settings.data.cron.updateDevices,\n        },\n        {\n          name: 'syncDevices',\n          value: settings.data.cron.syncDevices,\n        }];\n        if (!settings.data.smartthings.useCloud) {\n          data.push({\n            name: 'cloudDevices',\n            value: settings.data.cron.syncDevices,\n          });\n        }\n        return (\n          <div>\n            {error ? (\n              <Alert\n                message={error}\n                showIcon\n                type=\"error\"\n                closable\n              />\n            ) : null}\n            <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n            <Button\n              type=\"primary\"\n              loading={loading}\n              block\n              disabled={!changed}\n              onClick={async () => {\n                await this.onSaveClick();\n              }}\n            >\n              {getLabels().save || 'Save'}\n            </Button>\n          </div>\n        );\n      }\n      return null;\n    }\n}\n","import * as React from 'react';\nimport {\n  Alert, Button, Select, Table,\n} from 'antd';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\n\nexport class NotificationSettings extends React.Component {\n    state = {\n      settings: {},\n      changed: false,\n      error: '',\n      smsCodes: null,\n      notifications: null,\n      loading: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async onSaveClick() {\n      const {\n        settings,\n        notifications,\n      } = this.state;\n      this.setState({ loading: true });\n      const copyConfig = JSON.parse(JSON.stringify(settings.data));\n      copyConfig.notifications = notifications;\n      try {\n        const res = await sendToBackend('/ui/settings', 'POST', copyConfig);\n        const status = JSON.parse(res.data);\n        if (status.status === 'OK') {\n          const event = { changed: false };\n          await this.props.reload();\n          await this.reload();\n          this.setState(event);\n        } else {\n          this.setState({ error: status.message });\n        }\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: getLabels().code,\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{text}</a>,\n        },\n        {\n          title: getLabels().description,\n          dataIndex: 'description',\n          key: 'description',\n          render: (text) => <a>{text}</a>,\n        },\n        {\n          title: getLabels().value,\n          dataIndex: 'description',\n          key: 'description',\n          render: (text, data) => (\n            <Select\n              style={{ width: 200 }}\n              defaultValue={this.state.notifications[data.name]}\n              onChange={(event) => {\n                if (event) {\n                  const newState = { changed: true };\n                  this.state.notifications[data.name] = event;\n                  newState.notifications = this.state.notifications;\n                  this.setState(newState);\n                }\n              }}\n            >\n              <Select.Option disabled={!this.state.settings.data.smartthings.sendNotification && !this.state.settings.data.smartthings.sms.enabled && !this.state.settings.data.smartthings.sms.sendSMSNotification} value=\"both\">{getLabels().both}</Select.Option>\n              <Select.Option disabled={!this.state.settings.data.smartthings.sms.enabled && !this.state.settings.data.smartthings.sms.sendSMSNotification} value=\"sms\">{getLabels().onlySMS}</Select.Option>\n              <Select.Option disabled={!this.state.settings.data.smartthings.sendNotification} value=\"push\">{getLabels().onlyPush}</Select.Option>\n              <Select.Option value=\"none\">{getLabels().none}</Select.Option>\n\n            </Select>\n          ),\n        },\n      ];\n    }\n\n    async reload() {\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      const respCodes = await fetchBackend('/ui/sms/codes');\n      const smsCodes = JSON.parse(respCodes.data);\n      this.setState({\n        settings,\n        smsCodes,\n        notifications: settings.data.notifications,\n      });\n    }\n\n    render() {\n      const {\n        settings, changed, loading, error, smsCodes, notifications,\n      } = this.state;\n      if (settings.status === 'OK' && smsCodes != null) {\n        const data = [];\n        Object.keys(notifications).forEach((nk) => {\n          data.push({\n            name: nk,\n            status: notifications[nk],\n            description: smsCodes[nk] || getLabels()[nk],\n          });\n        });\n        return (\n          <div>\n            {error ? (\n              <Alert\n                message={error}\n                showIcon\n                type=\"error\"\n                closable\n              />\n            ) : null}\n            <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n            <Button\n              type=\"primary\"\n              loading={loading}\n              block\n              disabled={!changed}\n              onClick={async () => {\n                await this.onSaveClick();\n              }}\n            >\n              {getLabels().save || 'Save'}\n            </Button>\n          </div>\n        );\n      }\n      return null;\n    }\n}\n","import * as React from 'react';\nimport { SmartthingsSettings } from './SmartthingsSettings';\nimport { SmartthingsAddDevice } from './SmartthingsAddDevice';\nimport { SmartthingsViewDevice } from './SmartthingsViewDevice';\nimport { AddUser } from './AddUser';\nimport { ViewUser } from './ViewUser';\nimport { CONTENTS } from './Constants';\nimport { SmartthingsSMS } from './SmartthingsSMS';\nimport { CronSettings } from './CronSettings';\nimport { NotificationSettings } from './NotificationSettings';\n\nexport class RemoteCtrlContentHandler extends React.Component {\n  render() {\n    const contentPage = this.props.name;\n    const { reload } = this.props;\n    const { id } = this.props;\n    if (contentPage === CONTENTS.SmartthingsSettings) {\n      return <SmartthingsSettings reload={reload} />;\n    } if (contentPage === CONTENTS.SmartthingsAddDevice) {\n      return <SmartthingsAddDevice reload={reload} />;\n    } if (contentPage === CONTENTS.SmartthingsViewDevice) {\n      return <SmartthingsViewDevice reload={reload} deviceId={id} />;\n    } if (contentPage === CONTENTS.AddUser) {\n      return <AddUser reload={reload} />;\n    } if (contentPage === CONTENTS.ViewUser) {\n      return <ViewUser reload={reload} userId={id} />;\n    } if (contentPage === CONTENTS.SMS) {\n      return <SmartthingsSMS />;\n    } if (contentPage === CONTENTS.CRON) {\n      return <CronSettings />;\n    } if (contentPage === CONTENTS.NOTIFICATION) {\n      return <NotificationSettings />;\n    }\n    return null;\n  }\n}\n","import * as React from 'react';\nimport Sider from 'antd/lib/layout/Sider';\nimport { Menu, Spin } from 'antd';\nimport Layout, { Footer, Header } from 'antd/lib/layout/layout';\nimport {\n  AppstoreAddOutlined, DesktopOutlined,\n  LogoutOutlined, MessageOutlined,\n  NotificationOutlined, ScheduleOutlined, UserOutlined,\n} from '@ant-design/icons';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport Title from 'antd/es/typography/Title';\nimport { RemoteCtrlContentHandler } from './RemoteCtrlContentHandler';\nimport { fetchBackend } from '../utils/restCalls';\nimport { getLabels } from '../utils/Localization';\nimport { CONTENTS } from './Constants';\n\nexport class RemoteCtrlMain extends React.Component {\n    state = {\n      collapsed: false,\n      selectorPage: null,\n      settings: null,\n      componentId: null,\n      loading: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    reload = async (selectorPage, id) => {\n      this.setState({ loading: true });\n      const newState = {};\n      try {\n        const { data } = await fetchBackend('/ui/settings');\n        let settings = JSON.parse(data);\n        if (settings.data.smartthings.appId && settings.data.smartthings.appSecret) {\n          await fetchBackend('/ui/settings/syncDevices');\n        }\n        const res = await fetchBackend('/ui/settings');\n        settings = JSON.parse(res.data);\n        newState.settings = settings;\n        if (selectorPage) {\n          newState.selectorPage = selectorPage;\n        }\n        if (id) {\n          newState.componentId = id;\n        }\n      } finally {\n        newState.loading = false;\n        this.setState(newState);\n      }\n    }\n\n    onCollapse = (collapsed) => {\n      this.setState({ collapsed });\n    };\n\n    onSmartThingsSettingClick = () => {\n      this.setState({ selectorPage: CONTENTS.SmartthingsSettings });\n    };\n\n    onSMSClick = () => {\n      this.setState({ selectorPage: CONTENTS.SMS });\n    };\n\n    onNotificationClick = () => {\n      this.setState({ selectorPage: CONTENTS.NOTIFICATION });\n    };\n\n    onCRONClick = () => {\n      this.setState({ selectorPage: CONTENTS.CRON });\n    };\n\n    onSmartThingsAddDeviceClick = () => {\n      this.setState({ selectorPage: CONTENTS.SmartthingsAddDevice });\n    };\n\n    onAddUsersClick = () => {\n      this.setState({ selectorPage: CONTENTS.AddUser });\n    };\n\n    onSmartThingsViewDeviceClick = (deviceId) => {\n      this.setState({\n        selectorPage: CONTENTS.SmartthingsViewDevice,\n        componentId: deviceId,\n      });\n    };\n\n    onViewUserClick = (userId) => {\n      this.setState({\n        selectorPage: CONTENTS.ViewUser,\n        componentId: userId,\n      });\n    };\n\n    render() {\n      const {\n        collapsed, selectorPage, componentId, settings, loading,\n      } = this.state;\n      return loading ? (\n        <div>\n          <Spin size=\"large\" />\n          <Title>{getLabels().loading}</Title>\n        </div>\n      ) : (\n        <Layout style={{ minHeight: '100vh' }}>\n          <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n              <Menu.Item\n                key=\"1\"\n                icon={<DesktopOutlined />}\n                onClick={this.onSmartThingsSettingClick}\n              >\n                {getLabels().settings}\n              </Menu.Item>\n              <SubMenu key=\"devices\" icon={<AppstoreAddOutlined />} title={getLabels().devices} disabled={!(settings && settings.data.smartthings.useSmartthings && settings.data.smartthings.appId && settings.data.smartthings.appSecret)}>\n                {(settings && settings.data.smartthings.devices)\n                  ? settings.data.smartthings.devices.map((device) => (\n                    <Menu.Item\n                      key={device.id}\n                      onClick={() => {\n                        this.onSmartThingsViewDeviceClick(device.id);\n                      }}\n                    >\n                      {device.deviceLabel}\n                    </Menu.Item>\n                  ))\n                  : null}\n                <Menu.Item\n                  key=\"addDevice\"\n                  onClick={this.onSmartThingsAddDeviceClick}\n                >\n                  {getLabels().addDevice}\n                </Menu.Item>\n              </SubMenu>\n              {\n                        settings && settings.data.connectionType === 'local'\n                          ? (\n                            <SubMenu key=\"sub1\" icon={<UserOutlined />} title={getLabels().users}>\n                              {(settings && settings.data.users)\n                                ? settings.data.users.map((user) => (\n                                  <Menu.Item\n                                    key={user.id}\n                                    onClick={() => {\n                                      this.onViewUserClick(user.id);\n                                    }}\n                                  >\n                                    {user.username}\n                                  </Menu.Item>\n                                ))\n                                : null}\n                              <Menu.Item\n                                key=\"addUser\"\n                                onClick={() => {\n                                  this.onAddUsersClick();\n                                }}\n                              >\n                                {getLabels().addUser}\n                              </Menu.Item>\n                            </SubMenu>\n                          ) : null\n}\n              {\n                    settings && settings.data.smartthings.sms.enabled\n                      ? (\n                        <Menu.Item\n                          key=\"subSMS\"\n                          icon={<MessageOutlined />}\n                          onClick={this.onSMSClick}\n                        >\n                          {getLabels().sms}\n                        </Menu.Item>\n                      ) : null\n                }\n              {\n                    settings && (settings.data.smartthings.sms.sendSMSNotification\n                        || settings.data.smartthings.sendNotification)\n                      ? (\n                        <Menu.Item\n                          key=\"subNotification\"\n                          icon={<NotificationOutlined />}\n                          onClick={this.onNotificationClick}\n                        >\n                          {getLabels().notification}\n                        </Menu.Item>\n                      ) : null\n                }\n              <Menu.Item\n                key=\"subCron\"\n                icon={<ScheduleOutlined />}\n                onClick={this.onCRONClick}\n              >\n                {getLabels().cron}\n              </Menu.Item>\n              {\n                  settings && settings.data.connectionType === 'keycloak'\n                    ? (\n                      <Menu.Item\n                        key=\"subLogout\"\n                        icon={<LogoutOutlined />}\n                        onClick={() => {\n                          window.location.href = '/logout';\n                        }}\n                      >\n                        {getLabels().logout}\n                      </Menu.Item>\n                    ) : null\n                }\n\n            </Menu>\n          </Sider>\n          <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n            <RemoteCtrlContentHandler\n              name={selectorPage || CONTENTS.SmartthingsSettings}\n              id={componentId}\n              reload={this.reload}\n            />\n            <Footer style={{ textAlign: 'center' }}> ©2021 Created by Vasyl Zakharchenko</Footer>\n          </Layout>\n        </Layout>\n      );\n    }\n}\n","import './App.css';\nimport { RemoteCtrlMain } from './components/RemoteCtrlMain';\n\nfunction App() {\n  return (\n    <div>\n      <RemoteCtrlMain />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}