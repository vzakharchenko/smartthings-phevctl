{"version":3,"sources":["utils/RussianLanguage.js","utils/Localization.js","utils/restCalls.js","components/SmartthingsSettings.js","components/Constants.js","components/SmartthingsAddDevice.js","components/SmartthingsViewDevice.js","components/AddUser.js","components/ViewUser.js","components/SmartthingsSMS.js","components/CronSettings.js","components/RemoteCtrlContentHandler.js","components/RemoteCtrlMain.js","App.js","reportWebVitals.js","index.js"],"names":["RussianLabels","servicePort","uiPort","smartthingsAppId","smartthingsAppSecret","save","settings","devices","addDevice","users","addUser","actionId","deviceLabel","cooling10Mins","cooling20Mins","cooling30Mins","windscreen10Mins","windscreen20Mins","windscreen30Mins","heating10Mins","heating20Mins","heating30Mins","airconOn","airconOff","headlightsOn","headlightsOff","parkinglightsOn","parkinglightsOff","username","password","delete","shard","macAddress","keycloakJson","testDevice","actionTimeout","language","modalHelp","modalStep1","modalStep2","modalStep3","modalStep4","modelYear","any","phev2019","battery","updateValue","loading","batteryFactory","doors","forceUpdate","executeUpdate","hvac","sendNotification","testNotification","testNotificationLabel","sms","smsPassword","phone","mikrotikScript","mikrotikScheduler","smsCommands","smsCar","useSmartthings","smsCodes","cron","sendSMSNotification","theft","Labels","updateDevices","syncDevices","getLabels","Cookies","get","setLanguage","set","fetch","require","REACT_BACKEND_URL","errorHandler","response","console","error","data","fetchData","url","method","headers","Promise","resolve","reject","transformResponse","req","withCredentials","timeout","then","catch","fetchBackend","a","sendData","sendToBackend","headerMap","JSON","stringify","SmartthingsSettings","state","changed","isModalVisible","this","reload","setState","copyConfig","parse","smartthings","appId","appSecret","port","portUI","enabled","status","res","event","message","props","title","dataIndex","key","render","text","type","icon","QuestionCircleOutlined","onClick","Modal","visible","onCancel","footer","window","open","width","src","value","name","mask","placeholder","onChange","newValue","target","includes","newState","TextArea","autoSize","minRows","maxRows","checked","e","PoweroffOutlined","style","defaultValue","min","max","step","stringMode","Option","lang","Paragraph","editable","authenticationType","connectionType","push","showIcon","closable","pagination","columns","getColumns","dataSource","block","disabled","onSaveClick","React","CONTENTS","SmartthingsAddDevice","canSave","id","uuidv4","validation","onActionChange","onActionYearSelectChange","SmartthingsViewDevice","loadingPage","deviceId","updatable","prevProps","onTestClick","device","find","d","danger","onDeleteClick","AddUser","newConfigurations","ViewUser","userId","user","u","SmartthingsSMS","mikrotikSMS","currentHost","secret","Object","keys","map","code","command","replace","location","protocol","hostname","portSMS","resp","respHelp","respCodes","CronSettings","RemoteCtrlContentHandler","contentPage","RemoteCtrlMain","collapsed","selectorPage","componentId","onCollapse","onSmartThingsSettingClick","onSMSClick","onCRONClick","onSmartThingsAddDeviceClick","onAddUsersClick","onSmartThingsViewDeviceClick","onViewUserClick","size","Title","minHeight","collapsible","className","theme","defaultSelectedKeys","mode","Item","DesktopOutlined","AppstoreAddOutlined","UserOutlined","MessageOutlined","ScheduleOutlined","padding","textAlign","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d31fb715.chunk.js","sourcesContent":["export const RussianLabels = {\n  servicePort: 'Service Port',\n  uiPort: 'UI Port',\n  smartthingsAppId: 'Smartthings Application Id',\n  smartthingsAppSecret: 'Smartthings Application Secret',\n  save: 'Сохранить',\n  settings: 'Настройки',\n  devices: 'Устройства',\n  addDevice: 'Добавить Устройство',\n  users: 'Пользователи',\n  addUser: 'Добавить Пользователя',\n  actionId: 'Действие',\n  deviceLabel: 'Название устройства',\n  cooling10Mins: 'Режим Охлаждения на 10 Мин.',\n  cooling20Mins: 'Режим Охлаждения на 20 Мин.',\n  cooling30Mins: 'Режим Охлаждения на 30 Мин.',\n  windscreen10Mins: 'Обогрев лобового окна на 10 мин.',\n  windscreen20Mins: 'Обогрев лобового окна на 20 мин.',\n  windscreen30Mins: 'Обогрев лобового окна на 30 мин.',\n  heating10Mins: 'Режим Отопителя на 10 мин.',\n  heating20Mins: 'Режим Отопителя на 20 мин.',\n  heating30Mins: 'Режим Отопителя на 30 мин.',\n  airconOn: 'Включить Климат контроль',\n  airconOff: 'Отключить Климат Контроль',\n  headlightsOn: 'Включить Фары',\n  headlightsOff: 'Выключить Фары',\n  parkinglightsOn: 'Включить Парковочные огни',\n  parkinglightsOff: 'Выключить Парковочные огни',\n  username: 'Имя пользователя',\n  password: 'Пароль',\n  delete: 'Удалить',\n  shard: 'Smartthings Portal Shard',\n  macAddress: 'MAC адрес',\n  keycloakJson: 'Securing Applications using keycloak.json',\n  testDevice: 'Протестировать устройство',\n  actionTimeout: 'Максимальное время выполнения ',\n  language: 'Язык',\n  modalHelp: 'Где взять параметр ',\n  modalStep1: '1. Откройте портал ',\n  modalStep2: '2. Выбрать smartapps в вашей локации ',\n  modalStep3: '3. Выберите созданное вами \"remote-ctrl-gsm\" ',\n  modalStep4: '4. Возмите со страницы параметр ',\n  modelYear: 'Год Выпуска PHEV',\n  any: 'Любой',\n  phev2019: '2019',\n  battery: 'Заряд Батареи',\n  updateValue: 'Обновить Текущее Значение',\n  loading: 'Подождите идет загрузка...',\n  batteryFactory: 'Множитель батареи',\n  doors: 'Статус Открытия/Закрытия Дверей',\n  forceUpdate: 'Принудительно обновить модуль',\n  executeUpdate: 'Принудительно обновить перед выполнением',\n  hvac: 'Текущий режим HVAC',\n  sendNotification: 'Отправлять сообщения о состоянии батареи',\n  testNotification: 'Проверить отправку сообщений',\n  testNotificationLabel: 'Отправлять Push Уведомления',\n  sms: 'SMS Сервис',\n  smsPassword: 'SMS Пароль',\n  phone: 'Номер мобильного телефона с которого можно слать СМС',\n  mikrotikScript: 'Mikrotik Script',\n  mikrotikScheduler: 'Mikrotik Scheduler',\n  smsCommands: 'Список поддержуемых SMS операций',\n  smsCar: 'Год Выпуска PHEV в SMS',\n  useSmartthings: 'Использовать Smartthings',\n  smsCodes: 'SMS Коды Ошибок',\n  cron: 'Cron задания',\n  sendSMSNotification: 'Отправлять нотификацию через СМС',\n  theft: 'Активирована ли штатная охранная система сигнализации в ETACS?',\n};\n","import Cookies from 'js-cookie';\nimport { RussianLabels } from './RussianLanguage';\n\nconst Labels = {\n  servicePort: 'Service Port',\n  uiPort: 'UI Port',\n  smartthingsAppId: 'Smartthings Application Id',\n  smartthingsAppSecret: 'Smartthings Application Secret',\n  save: 'Save',\n  settings: 'Settings',\n  devices: 'Devices',\n  addDevice: 'Add Device',\n  users: 'Users',\n  addUser: 'Add User',\n  actionId: 'Action',\n  deviceLabel: 'Device Label',\n  cooling10Mins: 'Cooling Mode 10 Mins',\n  cooling20Mins: 'Cooling Mode 20 Mins',\n  cooling30Mins: 'Cooling Mode 30 Mins',\n  windscreen10Mins: 'Windscreen Mode 10 Mins',\n  windscreen20Mins: 'Windscreen Mode 20 Mins',\n  windscreen30Mins: 'Windscreen Mode 30 Mins',\n  heating10Mins: 'Heating Mode 10 Mins',\n  heating20Mins: 'Heating Mode 20 Mins',\n  heating30Mins: 'Heating Mode 30 Mins',\n  airconOn: 'Air conditioner On',\n  airconOff: 'Air conditioner Off',\n  headlightsOn: 'Headlights On',\n  headlightsOff: 'Headlights Off',\n  parkinglightsOn: 'Parkinglights On',\n  parkinglightsOff: 'Parkinglights Off',\n  username: 'Username',\n  password: 'Password',\n  delete: 'Delete',\n  shard: 'Smartthings Portal Shard',\n  macAddress: 'Outlander PHEV Client Mac Address',\n  keycloakJson: 'Securing Applications using keycloak.json',\n  testDevice: 'Test Action',\n  testNotification: 'Test Notification',\n  actionTimeout: 'Action Timeout',\n  language: 'Language',\n  modalHelp: 'Where to get ',\n  modalStep1: '1. Open ',\n  modalStep2: '2. Select smartapps in your location ',\n  modalStep3: '3. Select your smartapp ',\n  modalStep4: '4. get parameter ',\n  modelYear: 'Model Year',\n  any: 'Any',\n  phev2019: '2019',\n  battery: 'battery',\n  updateValue: 'Update Value',\n  loading: 'Loading...',\n  batteryFactory: 'Battery Factor',\n  doors: 'Doors Status',\n  forceUpdate: 'Force Update',\n  executeUpdate: 'Force Update during update values',\n  hvac: 'Thermostat Operating State',\n  sendNotification: 'Send Push Notification about Battery Warning',\n  testNotificationLabel: 'Send Push Notification',\n  sms: 'SMS API Service',\n  smsPassword: 'SMS Password',\n  phone: 'Authorized mobile phone from which SMS can be sent',\n  mikrotikScript: 'Mikrotik Script',\n  mikrotikScheduler: 'Mikrotik Scheduler',\n  smsCommands: 'List of SMS Commands',\n  smsCar: 'Model Year for SMS',\n  useSmartthings: 'Use Smartthings',\n  smsCodes: 'SMS Error Codes',\n  cron: 'Cron Jobs',\n  sendSMSNotification: 'Send notification over SMS',\n  updateDevices: 'Update Devices Job',\n  syncDevices: 'sync Devices between local and Smartthings Job',\n  theft: 'Theft alarm system activated in ETACS ',\n};\n\nexport function getLabels() {\n  const currentLanguage = Cookies.get('Language');\n  if (currentLanguage === 'Russian') {\n    return { ...Labels, ...RussianLabels };\n  }\n  return Labels;\n}\n\nexport function setLanguage(language) {\n  const currentLanguage = Cookies.get('Language');\n  if (currentLanguage !== language) {\n    if (language === 'Russian' || language === 'English') {\n      Cookies.set('Language', language);\n    }\n  }\n}\n","const fetch = require('axios');\n\nconst REACT_BACKEND_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:8080' : '';\n\nfunction errorHandler(response) {\n  // eslint-disable-next-line no-console\n  console.error('error:', response.data);\n}\n\nexport function fetchData(url, method = 'GET', headers) {\n  return new Promise((resolve, reject) => {\n    fetch({\n      url,\n      method,\n      headers,\n      transformResponse: (req) => req,\n      withCredentials: true,\n      timeout: 29000,\n    }).then((response) => {\n      resolve(response);\n    }).catch((response) => {\n      errorHandler(response);\n      reject(response);\n    });\n  });\n}\n\nexport async function fetchBackend(url, method = 'GET', headers) {\n  return await fetchData(`${REACT_BACKEND_URL}${url}`, method, headers);\n}\n\nexport function sendData(url, method = 'POST', data, headers) {\n  return new Promise((resolve, reject) => {\n    fetch({\n      url,\n      method,\n      data,\n      transformResponse: (req) => req,\n      headers,\n      withCredentials: true,\n      timeout: 29000,\n    }).then((response) => {\n      resolve(response);\n    }).catch((response) => {\n      errorHandler(response);\n      reject(response);\n    });\n  });\n}\n\nexport async function sendToBackend(url, method = 'POST', data, headers) {\n  const headerMap = headers || {};\n  headerMap['Content-Type'] = 'application/json';\n  return await sendData(`${REACT_BACKEND_URL}${url}`, method, JSON.stringify(data), headerMap);\n}\n","import * as React from 'react';\nimport {\n  Alert, Button, Checkbox, Image, InputNumber, Select, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport MaskedInput from 'antd-mask-input';\nimport TextArea from 'antd/es/input/TextArea';\nimport { PoweroffOutlined, QuestionCircleOutlined } from '@ant-design/icons';\nimport Modal from 'antd/es/modal/Modal';\nimport { getLabels, setLanguage } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\n\nexport class SmartthingsSettings extends React.Component {\n    state = {\n      settings: {},\n      servicePort: '',\n      uiPort: '',\n      smartthingsAppId: '',\n      smartthingsAppSecret: '',\n      macAddress: '',\n      actionTimeout: 0,\n      language: 'English',\n      changed: false,\n      loading: false,\n      error: '',\n      keycloakJson: '',\n      executeUpdate: true,\n      sms: true,\n      smsPassword: '',\n      sendNotification: true,\n      sendSMSNotification: false,\n      smsCar: 'any',\n      useSmartthings: false,\n      batteryFactory: 1.0,\n      isModalVisible: false,\n      theft: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async onSaveClick() {\n      const {\n        uiPort,\n        servicePort,\n        settings,\n        smartthingsAppId,\n        smartthingsAppSecret,\n        macAddress,\n        keycloakJson,\n        language,\n        actionTimeout,\n        batteryFactory,\n        executeUpdate,\n        sendNotification,\n        smsPassword,\n        sms,\n        sendSMSNotification,\n        shard,\n        useSmartthings,\n        smsCar,\n        theft,\n      } = this.state;\n      this.setState({ loading: true });\n      const copyConfig = JSON.parse(JSON.stringify(settings.data));\n      if (smartthingsAppId) {\n        copyConfig.smartthings.appId = smartthingsAppId;\n      }\n      if (smartthingsAppSecret) {\n        copyConfig.smartthings.appSecret = smartthingsAppSecret;\n      }\n      if (shard) {\n        copyConfig.smartthings.shard = shard;\n      }\n      if (macAddress) {\n        copyConfig.macAddress = macAddress;\n      }\n      if (servicePort) {\n        copyConfig.port = servicePort;\n      }\n      if (uiPort) {\n        copyConfig.portUI = uiPort;\n      }\n      if (actionTimeout) {\n        copyConfig.smartthings.timeout = actionTimeout;\n      }\n      if (language) {\n        copyConfig.language = language;\n      }\n      if (batteryFactory) {\n        copyConfig.batteryFactory = batteryFactory;\n      }\n      copyConfig.smartthings.sms.enabled = sms;\n      if (smsPassword) {\n        copyConfig.smartthings.sms.password = smsPassword;\n      }\n      if (smsCar) {\n        copyConfig.smartthings.sms.smsCar = smsCar;\n        copyConfig.smartthings.sms.sendSMSNotification = sendSMSNotification;\n      }\n      copyConfig.smartthings.useSmartthings = useSmartthings;\n      copyConfig.theft = theft;\n      copyConfig.smartthings.executeUpdate = executeUpdate;\n      copyConfig.smartthings.sendNotification = sendNotification;\n      try {\n        let res;\n        let status = { status: 'OK' };\n        if (useSmartthings) {\n          res = await fetchBackend(`/ui/smartthings/check?appId=${smartthingsAppId}&secret=${smartthingsAppSecret}`);\n          status = JSON.parse(res.data);\n        }\n        if (status.status === 'OK') {\n          res = await sendToBackend('/ui/settings', 'POST', copyConfig);\n          status = JSON.parse(res.data);\n          if (status.status === 'OK') {\n            const event = { changed: false };\n            if (keycloakJson) {\n              res = await sendToBackend('/ui/settings/saveKeycloak', 'POST', { keycloakJson });\n              status = JSON.parse(res.data);\n              if (status.status !== 'OK') {\n                event.error = status.message;\n              } else {\n                event.error = '';\n              }\n            }\n            await this.props.reload();\n            await this.reload();\n            this.setState(event);\n          } else {\n            this.setState({ error: status.message });\n          }\n        } else {\n          this.setState({ error: status.message });\n        }\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => {\n            if (text === 'smartthingsAppId'\n                || text === 'smartthingsAppSecret') {\n              return (\n                <div>\n                  <a>{getLabels()[text] || text}</a>\n                  <Button\n                    type=\"text\"\n                    icon={<QuestionCircleOutlined />}\n                    onClick={() => {\n                      this.setState({ isModalVisible: true });\n                    }}\n                  />\n                  <Modal\n                    title={getLabels().modalHelp + getLabels()[text] || text}\n                    visible={this.state.isModalVisible}\n                    onCancel={(\n                    ) => { this.setState({ isModalVisible: false }); }}\n                    footer={[\n                      <Button\n                        key=\"ok\"\n                        type=\"primary\"\n                        onClick={() => {\n                          this.setState({ isModalVisible: false });\n                        }}\n                      >\n                        Ok\n                      </Button>,\n                    ]}\n                  >\n                    <p>\n                      {getLabels().modalStep1}\n                      <Button\n                        type=\"link\"\n                        onClick={() => {\n                          window.open('https://graph.api.smartthings.com', '_blank');\n                        }}\n                      >\n                        https://graph.api.smartthings.com/\n                      </Button>\n                    </p>\n                    <p>{getLabels().modalStep2}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp1.png\"\n                    />\n                    <p>{getLabels().modalStep3}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp2.png\"\n                    />\n                    <p>{getLabels().modalStep4 + getLabels()[text] || text}</p>\n                    <Image\n                      width={400}\n                      src=\"/img/smartapp3.png\"\n                    />\n                  </Modal>\n                </div>\n              );\n            }\n            return <a>{getLabels()[text] || text}</a>;\n          },\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'macAddress') {\n              return (\n                <MaskedInput\n                  mask=\"##:##:##:##:##:##\"\n                  name={getLabels().macAddress || text}\n                  value={value}\n                  placeholder=\"xx:xx:xx:xx:xx:xx\"\n                  onChange={\n                            (newValue) => {\n                              if (newValue.target.value && !newValue.target.value.includes('_')) {\n                                const newState = { changed: true };\n                                newState.macAddress = newValue.target.value;\n                                this.setState(newState);\n                              }\n                            }\n                        }\n                />\n              );\n            }\n            if (data.name === 'keycloakJson') {\n              return (\n                <TextArea\n                  onChange={\n                                (newValue) => {\n                                  if (newValue.target.value) {\n                                    const newState = { changed: true };\n                                    newState.keycloakJson = newValue.target.value;\n                                    this.setState(newState);\n                                  }\n                                }\n                            }\n                  placeholder=\"Keycloak Json\"\n                  autoSize={{ minRows: 3, maxRows: 5 }}\n                />\n              );\n            }\n            if (data.name === 'executeUpdate') {\n              return (\n                <Checkbox\n                  checked={this.state.executeUpdate}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.executeUpdate = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'sendNotification') {\n              return (\n                <div>\n                  <Checkbox\n                    checked={this.state.sendNotification}\n                    onChange={(e) => {\n                      const newState = { changed: true };\n                      newState.sendNotification = e.target.checked;\n                      this.setState(newState);\n                    }}\n                  >\n                    {getLabels().testNotificationLabel}\n                  </Checkbox>\n                  <br />\n                  <Button\n                    type=\"primary\"\n                    icon={<PoweroffOutlined />}\n                    loading={this.state.loading}\n                    onClick={async () => {\n                      this.setState({ loading: true });\n                      try {\n                        await sendToBackend('/ui/settings/testNotification', 'POST', { message: 'Test Message' });\n                      } finally {\n                        this.setState({ loading: false });\n                      }\n                    }}\n                  >\n                    {getLabels().testNotification}\n                  </Button>\n                </div>\n              );\n            }\n            if (data.name === 'actionTimeout') {\n              return (\n                <InputNumber\n                  style={{\n                    width: 200,\n                  }}\n                  defaultValue={this.state.actionTimeout}\n                  min=\"0\"\n                  max=\"300000\"\n                  step=\"1000\"\n                  onChange={\n                        (newValue) => {\n                          if (newValue) {\n                            const newState = { changed: true };\n                            newState.actionTimeout = newValue;\n                            this.setState(newState);\n                          }\n                        }\n                      }\n                  stringMode\n                />\n              );\n            }\n            if (data.name === 'batteryFactory') {\n              return (\n                <InputNumber\n                  style={{\n                    width: 200,\n                  }}\n                  defaultValue={this.state.batteryFactory}\n                  min=\"0\"\n                  max=\"10\"\n                  step=\"0.0001\"\n                  onChange={\n                        (newValue) => {\n                          if (newValue) {\n                            const newState = { changed: true };\n                            newState.batteryFactory = newValue;\n                            this.setState(newState);\n                          }\n                        }\n                      }\n                  stringMode\n                />\n              );\n            }\n            if (data.name === 'smsCar') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.setState({\n                      smsCar: event,\n                      changed: true,\n                    });\n                  }}\n                  defaultValue={this.state.smsCar || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'sms') {\n              return (\n                <Checkbox\n                  checked={this.state.sms}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.sms = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'theft') {\n              return (\n                <Checkbox\n                  checked={this.state.theft}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.theft = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'sendSMSNotification') {\n              return (\n                <Checkbox\n                  checked={this.state.sendSMSNotification}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.sendSMSNotification = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'useSmartthings') {\n              return (\n                <Checkbox\n                  checked={this.state.useSmartthings}\n                  onChange={(e) => {\n                    const newState = { changed: true };\n                    newState.useSmartthings = e.target.checked;\n                    this.setState(newState);\n                  }}\n                />\n              );\n            }\n            if (data.name === 'language') {\n              return (\n                <Select\n                  defaultValue={this.state.language}\n                  style={{ width: 200 }}\n                  onChange={(lang) => {\n                    this.setState({ language: lang, changed: true });\n                  }}\n                >\n                  <Select.Option value=\"English\">English</Select.Option>\n                  <Select.Option value=\"Russian\">Russian</Select.Option>\n                </Select>\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { changed: true };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    async reload() {\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      setLanguage(settings.data.language || 'English');\n      this.setState({\n        settings,\n        servicePort: settings.data.port,\n        uiPort: settings.data.portUI,\n        smartthingsAppId: settings.data.smartthings.appId,\n        smartthingsAppSecret: settings.data.smartthings.appSecret,\n        macAddress: settings.data.macAddress,\n        shard: settings.data.smartthings.shard,\n        authenticationType: settings.data.connectionType,\n        actionTimeout: settings.data.smartthings.timeout,\n        batteryFactory: settings.data.batteryFactory || 1.0,\n        language: settings.data.language || 'English',\n        theft: settings.data.theft,\n        executeUpdate: settings.data.smartthings.executeUpdate,\n        sendNotification: settings.data.smartthings.sendNotification,\n        sms: settings.data.smartthings.sms.enabled,\n        smsCar: settings.data.smartthings.sms.smsCar || 'any',\n        smsPassword: settings.data.smartthings.sms.password,\n        useSmartthings: settings.data.smartthings.useSmartthings,\n        sendSMSNotification: !!settings.data.smartthings.sms.sendSMSNotification,\n      });\n    }\n\n    render() {\n      const {\n        settings, changed, useSmartthings, loading, error, sms,\n      } = this.state;\n      if (settings.status === 'OK') {\n        const data = [{\n          name: 'macAddress',\n          value: settings.data.macAddress,\n        }, {\n          name: 'theft',\n          value: settings.data.theft,\n        },\n        {\n          name: 'useSmartthings',\n          value: settings.data.smartthings.useSmartthings,\n        }];\n        if (useSmartthings) {\n          data.push({\n            name: 'shard',\n            value: settings.data.smartthings.shard,\n          },\n          {\n            name: 'smartthingsAppId',\n            value: settings.data.smartthings.appId,\n          },\n          {\n            name: 'smartthingsAppSecret',\n            value: settings.data.smartthings.appSecret,\n          },\n          {\n            name: 'sendNotification',\n            value: settings.data.smartthings.sendNotification,\n          });\n        }\n\n        data.push(\n          {\n            name: 'keycloakJson',\n            value: '',\n          },\n          {\n            name: 'actionTimeout',\n            value: settings.data.smartthings.timeout,\n          },\n          {\n            name: 'executeUpdate',\n            value: settings.data.smartthings.executeUpdate,\n          },\n          {\n            name: 'language',\n            value: settings.data.language,\n          },\n          {\n            name: 'batteryFactory',\n            value: settings.data.batteryFactory || 1.0,\n          },\n          {\n            name: 'sms',\n            value: settings.data.smartthings.sms.enabled,\n          },\n        );\n        if (sms) {\n          data.push({\n            name: 'smsPassword',\n            value: settings.data.smartthings.sms.password,\n          });\n          data.push({\n            name: 'smsCar',\n            value: settings.data.smartthings.sms.smsCar,\n          });\n          data.push({\n            name: 'sendSMSNotification',\n            value: settings.data.smartthings.sms.sendSMSNotification,\n          });\n        }\n        return (\n          <div>\n            {error ? (\n              <Alert\n                message={error}\n                showIcon\n                type=\"error\"\n                closable\n              />\n            ) : null}\n            <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n            <Button\n              type=\"primary\"\n              loading={loading}\n              block\n              disabled={!changed}\n              onClick={async () => {\n                await this.onSaveClick();\n              }}\n            >\n              {getLabels().save || 'Save'}\n            </Button>\n          </div>\n        );\n      }\n      return null;\n    }\n}\n","export const CONTENTS = {\n  SmartthingsSettings: 'SMARTTHINGS_SETTINGS',\n  SmartthingsAddDevice: 'SMARTTHINGS_ADD_DEVICE',\n  SmartthingsViewDevice: 'SMARTTHINGS_VIEW_DEVICE',\n  AddUser: 'ADD_USER',\n  ViewUser: 'VIEW_USER',\n  SMS: 'SMS',\n  CRON: 'CRON',\n};\n","import * as React from 'react';\nimport {\n  Button, Select, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getLabels } from '../utils/Localization';\nimport { sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class SmartthingsAddDevice extends React.Component {\n    state = {\n      loading: false,\n      canSave: false,\n      deviceLabel: '',\n      actionId: '',\n      modelYear: 'any',\n    };\n\n    async onSaveClick() {\n      const {\n        deviceLabel,\n        actionId,\n        modelYear,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const id = uuidv4();\n        await sendToBackend('/ui/settings/addDevice', 'POST', {\n          id, deviceLabel, actionId, modelYear,\n        });\n        await this.props.reload(CONTENTS.SmartthingsViewDevice, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    onActionYearSelectChange(modelYear) {\n      const { actionId } = this.state;\n      this.setState({\n        modelYear,\n        canSave: this.validation(null, actionId),\n      });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'actionId') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionChange(event);\n                  }}\n                >\n                  <Select.Option value=\"doors\">{getLabels().doors}</Select.Option>\n                  <Select.Option value=\"hvac\">{getLabels().hvac}</Select.Option>\n                  <Select.Option value=\"battery\">{getLabels().battery}</Select.Option>\n                  <Select.Option value=\"airconOn\">{getLabels().airconOn}</Select.Option>\n                  <Select.Option value=\"airconOff\">{getLabels().airconOff}</Select.Option>\n                  <Select.Option value=\"headlightsOn\">{getLabels().headlightsOn}</Select.Option>\n                  <Select.Option value=\"headlightsOff\">{getLabels().headlightsOff}</Select.Option>\n                  <Select.Option value=\"parkinglightsOn\">{getLabels().parkinglightsOn}</Select.Option>\n                  <Select.Option value=\"parkinglightsOff\">{getLabels().parkinglightsOff}</Select.Option>\n                  <Select.Option value=\"cooling10Mins\">{getLabels().cooling10Mins}</Select.Option>\n                  <Select.Option value=\"cooling20Mins\">{getLabels().cooling20Mins}</Select.Option>\n                  <Select.Option value=\"cooling30Mins\">{getLabels().cooling30Mins}</Select.Option>\n                  <Select.Option value=\"windscreen10Mins\">{getLabels().windscreen10Mins}</Select.Option>\n                  <Select.Option value=\"windscreen20Mins\">{getLabels().windscreen20Mins}</Select.Option>\n                  <Select.Option value=\"windscreen30Mins\">{getLabels().windscreen30Mins}</Select.Option>\n                  <Select.Option value=\"heating10Mins\">{getLabels().heating10Mins}</Select.Option>\n                  <Select.Option value=\"heating20Mins\">{getLabels().heating20Mins}</Select.Option>\n                  <Select.Option value=\"heating30Mins\">{getLabels().heating30Mins}</Select.Option>\n                  <Select.Option value=\"forceUpdate\">{getLabels().forceUpdate}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'modelYear') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionYearSelectChange(event);\n                  }}\n                  defaultValue={this.state.modelYear || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    render() {\n      const {\n        loading,\n        canSave,\n        actionId,\n        deviceLabel,\n        modelYear,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'deviceLabel',\n          value: deviceLabel,\n        },\n        {\n          name: 'actionId',\n          value: actionId,\n        },\n      ];\n      if ([\n        'cooling10Mins',\n        'cooling20Mins',\n        'cooling30Mins',\n        'windscreen10Mins',\n        'windscreen20Mins',\n        'windscreen30Mins',\n        'heating10Mins',\n        'heating20Mins',\n        'heating30Mins',\n      ].includes(actionId)) {\n        data.push({\n          name: 'modelYear',\n          value: modelYear,\n        });\n      }\n\n      return (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport {\n  Button, Select, Spin, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { PoweroffOutlined } from '@ant-design/icons';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class SmartthingsViewDevice extends React.Component {\n    state = {\n      loadingPage: false,\n      loading: false,\n      canSave: false,\n      deviceLabel: '',\n      actionId: '',\n      deviceId: '',\n      updatable: false,\n      modelYear: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async componentDidUpdate(prevProps) {\n      if (this.props.deviceId !== prevProps.deviceId) {\n        await this.reload();\n      }\n    }\n\n    async onDeleteClick() {\n      const {\n        deviceId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/deleteDevice', 'POST', { deviceId });\n        await this.props.reload(CONTENTS.SmartthingsSettings);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onSaveClick() {\n      const {\n        deviceLabel,\n        actionId,\n        deviceId,\n        modelYear,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/addDevice', 'POST', {\n          id: deviceId, deviceLabel, actionId, modelYear,\n        });\n        await this.props.reload(CONTENTS.SmartthingsViewDevice, deviceId);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onTestClick() {\n      const {\n        deviceId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/testDevice', 'POST', { id: deviceId });\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    onActionYearSelectChange(modelYear) {\n      const { actionId } = this.state;\n      this.setState({\n        modelYear,\n        canSave: this.validation(null, actionId),\n      });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => (\n            <a>\n              {\n            (text === 'testDevice' && this.state.updatable) ? getLabels().updateValue : getLabels()[text] || text\n              }\n            </a>\n          ),\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            if (data.name === 'actionId') {\n              return (\n                <Select\n                  defaultValue={this.state.actionId}\n                  style={{ width: 200 }}\n                  disabled={this.state.updatable}\n                  onChange={(event) => {\n                    this.onActionChange(event);\n                  }}\n                >\n                  <Select.Option value=\"doors\">{getLabels().doors}</Select.Option>\n                  <Select.Option value=\"battery\">{getLabels().battery}</Select.Option>\n                  <Select.Option value=\"hvac\">{getLabels().hvac}</Select.Option>\n                  <Select.Option value=\"airconOn\">{getLabels().airconOn}</Select.Option>\n                  <Select.Option value=\"airconOff\">{getLabels().airconOff}</Select.Option>\n                  <Select.Option value=\"headlightsOn\">{getLabels().headlightsOn}</Select.Option>\n                  <Select.Option value=\"headlightsOff\">{getLabels().headlightsOff}</Select.Option>\n                  <Select.Option value=\"parkinglightsOn\">{getLabels().parkinglightsOn}</Select.Option>\n                  <Select.Option value=\"parkinglightsOff\">{getLabels().parkinglightsOff}</Select.Option>\n                  <Select.Option value=\"cooling10Mins\">{getLabels().cooling10Mins}</Select.Option>\n                  <Select.Option value=\"cooling20Mins\">{getLabels().cooling20Mins}</Select.Option>\n                  <Select.Option value=\"cooling30Mins\">{getLabels().cooling30Mins}</Select.Option>\n                  <Select.Option value=\"windscreen10Mins\">{getLabels().windscreen10Mins}</Select.Option>\n                  <Select.Option value=\"windscreen20Mins\">{getLabels().windscreen20Mins}</Select.Option>\n                  <Select.Option value=\"windscreen30Mins\">{getLabels().windscreen30Mins}</Select.Option>\n                  <Select.Option value=\"heating10Mins\">{getLabels().heating10Mins}</Select.Option>\n                  <Select.Option value=\"heating20Mins\">{getLabels().heating20Mins}</Select.Option>\n                  <Select.Option value=\"heating30Mins\">{getLabels().heating30Mins}</Select.Option>\n                  <Select.Option value=\"forceUpdate\">{getLabels().forceUpdate}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'modelYear') {\n              return (\n                <Select\n                  style={{ width: 200 }}\n                  onChange={(event) => {\n                    this.onActionYearSelectChange(event);\n                  }}\n                  defaultValue={this.state.modelYear || 'any'}\n                >\n                  <Select.Option value=\"any\">{getLabels().any}</Select.Option>\n                  <Select.Option value=\"2019\">{getLabels().phev2019}</Select.Option>\n                </Select>\n              );\n            }\n            if (data.name === 'deviceId' || data.name === 'deviceLabel') {\n              return value;\n            }\n            if (data.name === 'testDevice') {\n              return (\n                <Button\n                  type=\"primary\"\n                  icon={<PoweroffOutlined />}\n                  loading={this.state.loading}\n                  onClick={() => this.onTestClick()}\n                />\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      const device = settings.data.smartthings.devices.find((d) => d.id === this.props.deviceId);\n      this.setState({\n        actionId: device.actionId,\n        deviceLabel: device.deviceLabel,\n        deviceId: device.id,\n        modelYear: device.modelYear,\n        updatable: device.updatable,\n        loadingPage: false,\n      });\n    }\n\n    render() {\n      const {\n        loading,\n        loadingPage,\n        canSave,\n        actionId,\n        deviceId,\n        deviceLabel,\n        modelYear,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'deviceId',\n          value: deviceId,\n        },\n        {\n          name: 'deviceLabel',\n          value: deviceLabel,\n        },\n        {\n          name: 'actionId',\n          value: actionId,\n        },\n        {\n          name: 'testDevice',\n          value: '',\n        },\n      ];\n\n      if ([\n        'cooling10Mins',\n        'cooling20Mins',\n        'cooling30Mins',\n        'windscreen10Mins',\n        'windscreen20Mins',\n        'windscreen30Mins',\n        'heating10Mins',\n        'heating20Mins',\n        'heating30Mins',\n      ].includes(actionId)) {\n        data.push({\n          name: 'modelYear',\n          value: modelYear,\n        });\n      }\n\n      return loadingPage ? <Spin /> : (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            danger\n            onClick={async () => {\n              await this.onDeleteClick();\n            }}\n          >\n            {getLabels().delete || 'Delete'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Button, Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getLabels } from '../utils/Localization';\nimport { sendToBackend } from '../utils/restCalls';\n\nexport class AddUser extends React.Component {\n    state = {\n      loading: false,\n      canSave: false,\n      username: '',\n      password: '',\n    };\n\n    async onSaveClick() {\n      const {\n        username,\n        password,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const newConfigurations = {\n          users: [],\n        };\n        const id = uuidv4();\n        newConfigurations.users.push(\n          { id, username, password },\n        );\n        await sendToBackend('/ui/settings', 'POST', newConfigurations);\n        await this.props.reload(CONTENTS.ViewUser, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const d = {};\n                    d[data.name] = newValue;\n                    const newState = { canSave: this.validation(d) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(data) {\n      return (data.username || this.state.username) && (data.password || this.state.password);\n    }\n\n    render() {\n      const {\n        loading,\n        canSave,\n        username,\n        password,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'username',\n          value: username,\n        },\n        {\n          name: 'password',\n          value: password,\n        },\n      ];\n\n      return (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Button, Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\nimport { CONTENTS } from './Constants';\n\nexport class ViewUser extends React.Component {\n    state = {\n      loadingPage: false,\n      loading: false,\n      canSave: false,\n      username: '',\n      password: '',\n      userId: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async componentDidUpdate(prevProps) {\n      if (this.props.userId !== prevProps.userId) {\n        await this.reload();\n      }\n    }\n\n    async onSaveClick() {\n      const {\n        username,\n        password,\n        userId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        const newConfigurations = {\n          users: [],\n        };\n        const id = userId;\n        newConfigurations.users.push(\n          { id, username, password },\n        );\n        await sendToBackend('/ui/settings', 'POST', newConfigurations);\n        await this.props.reload(CONTENTS.ViewUser, id);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    async onDeleteClick() {\n      const {\n        userId,\n      } = this.state;\n      this.setState({ loading: true });\n      try {\n        await sendToBackend('/ui/settings/deleteUser', 'POST', { userId });\n        await this.props.reload(CONTENTS.SmartthingsSettings);\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    onActionChange(actionId) {\n      this.setState({ actionId, canSave: this.validation(null, actionId) });\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return data.name === 'userId' ? value : (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { canSave: this.validation(newValue) };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {data.name === 'password' && value ? '*******' : value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    validation(deviceLabel, actionId) {\n      return (deviceLabel || (this.state.deviceLabel && actionId) || this.state.actionId);\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      const user = settings.data.users.find((u) => u.id === this.props.userId);\n      this.setState({\n        username: user.username,\n        password: user.password,\n        userId: user.id,\n        loadingPage: false,\n      });\n    }\n\n    render() {\n      const {\n        loadingPage,\n        loading,\n        canSave,\n        username,\n        userId,\n        password,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'userId',\n          value: userId,\n        },\n        {\n          name: 'username',\n          value: username,\n        },\n        {\n          name: 'password',\n          value: password,\n        },\n      ];\n\n      return loadingPage ? <spin /> : (\n        <div>\n          <Table columns={this.getColumns()} dataSource={data} />\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            disabled={!canSave}\n            onClick={async () => {\n              await this.onSaveClick();\n            }}\n          >\n            {getLabels().save || 'Save'}\n          </Button>\n          <Button\n            type=\"primary\"\n            loading={loading}\n            block\n            danger\n            onClick={async () => {\n              await this.onDeleteClick();\n            }}\n          >\n            {getLabels().delete || 'Delete'}\n          </Button>\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport { Table } from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport MaskedInput from 'antd-mask-input';\nimport TextArea from 'antd/es/input/TextArea';\nimport { getLabels } from '../utils/Localization';\nimport { fetchBackend } from '../utils/restCalls';\n\nexport class SmartthingsSMS extends React.Component {\n    state = {\n      loadingPage: true,\n      // eslint-disable-next-line react/no-unused-state\n      settings: null,\n      mikrotikSMS: null,\n      smsCommands: null,\n      smsCodes: null,\n      phone: '',\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            if (data.name === 'phone') {\n              return (\n                <MaskedInput\n                  mask=\"+############\"\n                  name={getLabels().phone || text}\n                  value={this.state.phone}\n                  placeholder=\"+xxxxxxxxxxxx\"\n                  onChange={\n                          (newValue) => {\n                            if (newValue.target.value && !newValue.target.value.includes('_')) {\n                              const newState = { phone: newValue.target.value };\n                              this.setState(newState);\n                            }\n                          }\n                      }\n                />\n              );\n            }\n            if (data.name === 'applicationHost') {\n              return this.currentHost();\n            }\n            if (data.name === 'applicationId') {\n              return this.state.settings.data.smartthings.sms.appId;\n            }\n            if (data.name === 'applicationSecret') {\n              return this.state.settings.data.smartthings.sms.secret;\n            }\n            if (data.name === 'smsCodes') {\n              return (\n                <Table\n                  pagination={false}\n                  columns={[\n                    {\n                      title: 'Code',\n                      dataIndex: 'name',\n                      key: 'name',\n                    }, {\n                      title: 'Description',\n                      dataIndex: 'value',\n                      key: 'value',\n                    }]}\n                  dataSource={\n                         Object.keys(this.state.smsCodes).map((code) => ({\n                           name: code,\n                           value: this.state.smsCodes[code],\n                         }))\n                       }\n                />\n              );\n            }\n            if (data.name === 'smsCommands') {\n              return (\n                <Table\n                  pagination={false}\n                  columns={[{\n                    title: 'Command',\n                    dataIndex: 'name',\n                    key: 'name',\n                  }]}\n                  dataSource={\n                  this.state.smsCommands.map((command) => ({\n                    name: command,\n                  }))\n                }\n                />\n              );\n            }\n            if (data.name === 'mikrotikScript') {\n              return (\n                <TextArea\n                  autoSize={{ minRows: 30, maxRows: 100 }}\n                  value={\n                  this.state.mikrotikSMS\n                    .replace('PHONE_NUMBER', this.state.phone)\n                    .replace('CURRENT_HOST', this.currentHost())\n                    .replace('APP_ID', this.state.settings.data.smartthings.sms.appId)\n                    .replace('APP_SECRET', this.state.settings.data.smartthings.sms.secret)\n                }\n                />\n              );\n            }\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = {};\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {text}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    currentHost() {\n      return `${window.location.protocol}//${window.location.hostname}:${this.state.settings.data.portSMS}`;\n    }\n\n    async reload() {\n      this.setState({\n        loadingPage: true,\n      });\n      let settings = null;\n      let mikrotikSMS = null;\n      let smsCommands = null;\n      let smsCodes = null;\n      try {\n        const { data } = await fetchBackend('/ui/settings');\n        settings = JSON.parse(data);\n        const resp = await fetchBackend('/mikrotikSMS.script');\n        const respHelp = await fetchBackend('/ui/sms/help');\n        const respCodes = await fetchBackend('/ui/sms/codes');\n        mikrotikSMS = resp.data;\n        smsCommands = JSON.parse(respHelp.data);\n        smsCodes = JSON.parse(respCodes.data);\n      } finally {\n        this.setState({\n          // eslint-disable-next-line react/no-unused-state\n          settings,\n          mikrotikSMS,\n          smsCommands,\n          smsCodes,\n          loadingPage: false,\n        });\n      }\n    }\n\n    render() {\n      const {\n        loadingPage,\n        phone,\n      } = this.state;\n\n      const data = [\n        {\n          name: 'phone',\n          value: phone,\n        },\n        {\n          name: 'applicationHost',\n          value: 'applicationHost',\n        },\n        {\n          name: 'applicationId',\n          value: 'applicationId',\n        },\n        {\n          name: 'applicationSecret',\n          value: 'applicationSecret',\n        },\n      ];\n\n      if (phone) {\n        data.push({\n          name: 'mikrotikScript',\n          value: 'mikrotikScript',\n        });\n      }\n      data.push({\n        name: 'smsCommands',\n        value: 'smsCommands',\n      });\n      data.push({\n        name: 'smsCodes',\n        value: 'smsCodes',\n      });\n      return loadingPage ? <spin /> : (\n        <div>\n          <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n        </div>\n      );\n    }\n}\n","import * as React from 'react';\nimport {\n  Alert, Button, Table,\n} from 'antd';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { getLabels, setLanguage } from '../utils/Localization';\nimport { fetchBackend, sendToBackend } from '../utils/restCalls';\n\nexport class CronSettings extends React.Component {\n    state = {\n      settings: {},\n      changed: false,\n      error: '',\n      updateDevices: '',\n      syncDevices: '',\n      loading: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    async onSaveClick() {\n      const {\n        settings,\n        updateDevices,\n        syncDevices,\n      } = this.state;\n      this.setState({ loading: true });\n      const copyConfig = JSON.parse(JSON.stringify(settings.data));\n      if (updateDevices) {\n        copyConfig.cron.updateDevices = updateDevices;\n      }\n      if (syncDevices) {\n        copyConfig.cron.syncDevices = syncDevices;\n      }\n      try {\n        const res = await sendToBackend('/ui/settings', 'POST', copyConfig);\n        const status = JSON.parse(res.data);\n        if (status.status === 'OK') {\n          const event = { changed: false };\n          await this.props.reload();\n          await this.reload();\n          this.setState(event);\n        } else {\n          this.setState({ error: status.message });\n        }\n      } finally {\n        this.setState({ loading: false });\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: 'Name',\n          dataIndex: 'name',\n          key: 'name',\n          render: (text) => <a>{getLabels()[text] || text}</a>,\n        },\n        {\n          title: 'Value',\n          dataIndex: 'value',\n          key: 'value',\n          render: (text, data) => {\n            const value = this.state[data.name];\n            return (\n              <Paragraph editable={{\n                onChange: (newValue) => {\n                  if (newValue) {\n                    const newState = { changed: true };\n                    newState[data.name] = newValue;\n                    this.setState(newState);\n                  }\n                },\n              }}\n              >\n                {value}\n              </Paragraph>\n            );\n          },\n        },\n      ];\n    }\n\n    async reload() {\n      const { data } = await fetchBackend('/ui/settings');\n      const settings = JSON.parse(data);\n      setLanguage(settings.data.language || 'English');\n      this.setState({\n        settings,\n        updateDevices: settings.data.cron.updateDevices,\n        syncDevices: settings.data.cron.syncDevices,\n      });\n    }\n\n    render() {\n      const {\n        settings, changed, loading, error,\n      } = this.state;\n      if (settings.status === 'OK') {\n        const data = [{\n          name: 'updateDevices',\n          value: settings.data.cron.updateDevices,\n        },\n        {\n          name: 'syncDevices',\n          value: settings.data.cron.syncDevices,\n        }];\n        return (\n          <div>\n            {error ? (\n              <Alert\n                message={error}\n                showIcon\n                type=\"error\"\n                closable\n              />\n            ) : null}\n            <Table pagination={false} columns={this.getColumns()} dataSource={data} />\n            <Button\n              type=\"primary\"\n              loading={loading}\n              block\n              disabled={!changed}\n              onClick={async () => {\n                await this.onSaveClick();\n              }}\n            >\n              {getLabels().save || 'Save'}\n            </Button>\n          </div>\n        );\n      }\n      return null;\n    }\n}\n","import * as React from 'react';\nimport { SmartthingsSettings } from './SmartthingsSettings';\nimport { SmartthingsAddDevice } from './SmartthingsAddDevice';\nimport { SmartthingsViewDevice } from './SmartthingsViewDevice';\nimport { AddUser } from './AddUser';\nimport { ViewUser } from './ViewUser';\nimport { CONTENTS } from './Constants';\nimport { SmartthingsSMS } from './SmartthingsSMS';\nimport { CronSettings } from './CronSettings';\n\nexport class RemoteCtrlContentHandler extends React.Component {\n  render() {\n    const contentPage = this.props.name;\n    const { reload } = this.props;\n    const { id } = this.props;\n    if (contentPage === CONTENTS.SmartthingsSettings) {\n      return <SmartthingsSettings reload={reload} />;\n    } if (contentPage === CONTENTS.SmartthingsAddDevice) {\n      return <SmartthingsAddDevice reload={reload} />;\n    } if (contentPage === CONTENTS.SmartthingsViewDevice) {\n      return <SmartthingsViewDevice reload={reload} deviceId={id} />;\n    } if (contentPage === CONTENTS.AddUser) {\n      return <AddUser reload={reload} />;\n    } if (contentPage === CONTENTS.ViewUser) {\n      return <ViewUser reload={reload} userId={id} />;\n    } if (contentPage === CONTENTS.SMS) {\n      return <SmartthingsSMS />;\n    } if (contentPage === CONTENTS.CRON) {\n      return <CronSettings />;\n    }\n    return null;\n  }\n}\n","import * as React from 'react';\nimport Sider from 'antd/lib/layout/Sider';\nimport { Menu, Spin } from 'antd';\nimport Layout, { Footer, Header } from 'antd/lib/layout/layout';\nimport {\n  AppstoreAddOutlined, DesktopOutlined, MessageOutlined, ScheduleOutlined, UserOutlined,\n} from '@ant-design/icons';\nimport SubMenu from 'antd/lib/menu/SubMenu';\nimport Title from 'antd/es/typography/Title';\nimport { RemoteCtrlContentHandler } from './RemoteCtrlContentHandler';\nimport { fetchBackend } from '../utils/restCalls';\nimport { getLabels } from '../utils/Localization';\nimport { CONTENTS } from './Constants';\n\nexport class RemoteCtrlMain extends React.Component {\n    state = {\n      collapsed: false,\n      selectorPage: null,\n      settings: null,\n      componentId: null,\n      loading: false,\n    };\n\n    async componentDidMount() {\n      await this.reload();\n    }\n\n    reload = async (selectorPage, id) => {\n      this.setState({ loading: true });\n      const newState = {};\n      try {\n        const { data } = await fetchBackend('/ui/settings');\n        let settings = JSON.parse(data);\n        if (settings.data.smartthings.appId && settings.data.smartthings.appSecret) {\n          await fetchBackend('/ui/settings/syncDevices');\n        }\n        const res = await fetchBackend('/ui/settings');\n        settings = JSON.parse(res.data);\n        newState.settings = settings;\n        if (selectorPage) {\n          newState.selectorPage = selectorPage;\n        }\n        if (id) {\n          newState.componentId = id;\n        }\n      } finally {\n        newState.loading = false;\n        this.setState(newState);\n      }\n    }\n\n    onCollapse = (collapsed) => {\n      this.setState({ collapsed });\n    };\n\n    onSmartThingsSettingClick = () => {\n      this.setState({ selectorPage: CONTENTS.SmartthingsSettings });\n    };\n\n    onSMSClick = () => {\n      this.setState({ selectorPage: CONTENTS.SMS });\n    };\n\n    onCRONClick = () => {\n      this.setState({ selectorPage: CONTENTS.CRON });\n    };\n\n    onSmartThingsAddDeviceClick = () => {\n      this.setState({ selectorPage: CONTENTS.SmartthingsAddDevice });\n    };\n\n    onAddUsersClick = () => {\n      this.setState({ selectorPage: CONTENTS.AddUser });\n    };\n\n    onSmartThingsViewDeviceClick = (deviceId) => {\n      this.setState({\n        selectorPage: CONTENTS.SmartthingsViewDevice,\n        componentId: deviceId,\n      });\n    };\n\n    onViewUserClick = (userId) => {\n      this.setState({\n        selectorPage: CONTENTS.ViewUser,\n        componentId: userId,\n      });\n    };\n\n    render() {\n      const {\n        collapsed, selectorPage, componentId, settings, loading,\n      } = this.state;\n      return loading ? (\n        <div>\n          <Spin size=\"large\" />\n          <Title>{getLabels().loading}</Title>\n        </div>\n      ) : (\n        <Layout style={{ minHeight: '100vh' }}>\n          <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n              <Menu.Item\n                key=\"1\"\n                icon={<DesktopOutlined />}\n                onClick={this.onSmartThingsSettingClick}\n              >\n                {getLabels().settings}\n              </Menu.Item>\n              <SubMenu key=\"devices\" icon={<AppstoreAddOutlined />} title={getLabels().devices} disabled={!(settings && settings.data.smartthings.useSmartthings && settings.data.smartthings.appId && settings.data.smartthings.appSecret)}>\n                {(settings && settings.data.smartthings.devices)\n                  ? settings.data.smartthings.devices.map((device) => (\n                    <Menu.Item\n                      key={device.id}\n                      onClick={() => {\n                        this.onSmartThingsViewDeviceClick(device.id);\n                      }}\n                    >\n                      {device.deviceLabel}\n                    </Menu.Item>\n                  ))\n                  : null}\n                <Menu.Item\n                  key=\"addDevice\"\n                  onClick={this.onSmartThingsAddDeviceClick}\n                >\n                  {getLabels().addDevice}\n                </Menu.Item>\n              </SubMenu>\n              {\n                        settings && settings.data.connectionType === 'local'\n                          ? (\n                            <SubMenu key=\"sub1\" icon={<UserOutlined />} title={getLabels().users}>\n                              {(settings && settings.data.users)\n                                ? settings.data.users.map((user) => (\n                                  <Menu.Item\n                                    key={user.id}\n                                    onClick={() => {\n                                      this.onViewUserClick(user.id);\n                                    }}\n                                  >\n                                    {user.username}\n                                  </Menu.Item>\n                                ))\n                                : null}\n                              <Menu.Item\n                                key=\"addUser\"\n                                onClick={() => {\n                                  this.onAddUsersClick();\n                                }}\n                              >\n                                {getLabels().addUser}\n                              </Menu.Item>\n                            </SubMenu>\n                          ) : null\n}\n              {\n                    settings && settings.data.smartthings.sms.enabled\n                      ? (\n                        <Menu.Item\n                          key=\"subSMS\"\n                          icon={<MessageOutlined />}\n                          onClick={this.onSMSClick}\n                        >\n                          {getLabels().sms}\n                        </Menu.Item>\n                      ) : null\n                }\n              <Menu.Item\n                key=\"subCron\"\n                icon={<ScheduleOutlined />}\n                onClick={this.onCRONClick}\n              >\n                {getLabels().cron}\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n            <RemoteCtrlContentHandler\n              name={selectorPage || CONTENTS.SmartthingsSettings}\n              id={componentId}\n              reload={this.reload}\n            />\n            <Footer style={{ textAlign: 'center' }}> ©2021 Created by Vasyl Zakharchenko</Footer>\n          </Layout>\n        </Layout>\n      );\n    }\n}\n","import './App.css';\nimport { RemoteCtrlMain } from './components/RemoteCtrlMain';\n\nfunction App() {\n  return (\n    <div>\n      <RemoteCtrlMain />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}